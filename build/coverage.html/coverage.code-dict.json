{"/home/travis/build/npmtest/node-npmtest-nativescript-angular/test.js":"/* istanbul instrument in package npmtest_nativescript_angular */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nativescript-angular/lib.npmtest_nativescript_angular.js":"/* istanbul instrument in package npmtest_nativescript_angular */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_nativescript_angular = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_nativescript_angular = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-nativescript-angular/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-nativescript-angular && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_nativescript_angular */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_nativescript_angular\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_nativescript_angular.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_nativescript_angular.rollup.js'] =\n            local.assetsDict['/assets.npmtest_nativescript_angular.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_nativescript_angular.__dirname + '/lib.npmtest_nativescript_angular.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/index.js":"function __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nrequire(\"application\");\n__export(require(\"./platform-common\"));\n__export(require(\"./platform\"));\n__export(require(\"./platform-static\"));\n__export(require(\"./router\"));\n__export(require(\"./forms\"));\n__export(require(\"./http\"));\n__export(require(\"./directives\"));\n__export(require(\"./common/detached-loader\"));\n__export(require(\"./trace\"));\n__export(require(\"./platform-providers\"));\n__export(require(\"./file-system/ns-file-system\"));\n__export(require(\"./modal-dialog\"));\n__export(require(\"./renderer\"));\n__export(require(\"./view-util\"));\n__export(require(\"./resource-loader\"));\nvar element_registry_1 = require(\"./element-registry\");\nexports.registerElement = element_registry_1.registerElement;\nexports.getViewClass = element_registry_1.getViewClass;\nexports.getViewMeta = element_registry_1.getViewMeta;\nexports.isKnownView = element_registry_1.isKnownView;\n__export(require(\"./value-accessors/base-value-accessor\"));\n//# sourceMappingURL=index.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/animations.js":"var core_1 = require(\"@angular/core\");\nvar browser_1 = require(\"@angular/animations/browser\");\nvar animations_1 = require(\"@angular/platform-browser/animations\");\nvar animation_engine_1 = require(\"./animations/animation-engine\");\nvar animation_driver_1 = require(\"./animations/animation-driver\");\nvar nativescript_module_1 = require(\"./nativescript.module\");\nvar renderer_1 = require(\"./renderer\");\nvar InjectableAnimationEngine = (function (_super) {\n    __extends(InjectableAnimationEngine, _super);\n    function InjectableAnimationEngine(driver, normalizer) {\n        return _super.call(this, driver, normalizer) || this;\n    }\n    return InjectableAnimationEngine;\n}(animation_engine_1.NativeScriptAnimationEngine));\nInjectableAnimationEngine = __decorate([\n    core_1.Injectable(),\n    __metadata(\"design:paramtypes\", [browser_1.AnimationDriver, browser_1.ɵAnimationStyleNormalizer])\n], InjectableAnimationEngine);\nexports.InjectableAnimationEngine = InjectableAnimationEngine;\nfunction instantiateSupportedAnimationDriver() {\n    return new animation_driver_1.NativeScriptAnimationDriver();\n}\nexports.instantiateSupportedAnimationDriver = instantiateSupportedAnimationDriver;\nfunction instantiateRendererFactory(renderer, engine, zone) {\n    return new animations_1.ɵAnimationRendererFactory(renderer, engine, zone);\n}\nexports.instantiateRendererFactory = instantiateRendererFactory;\nfunction instanciateDefaultStyleNormalizer() {\n    return new browser_1.ɵWebAnimationsStyleNormalizer();\n}\nexports.instanciateDefaultStyleNormalizer = instanciateDefaultStyleNormalizer;\nexports.NATIVESCRIPT_ANIMATIONS_PROVIDERS = [\n    { provide: browser_1.AnimationDriver, useFactory: instantiateSupportedAnimationDriver },\n    { provide: browser_1.ɵAnimationStyleNormalizer, useFactory: instanciateDefaultStyleNormalizer },\n    { provide: browser_1.ɵAnimationEngine, useClass: InjectableAnimationEngine }, {\n        provide: core_1.RendererFactory2,\n        useFactory: instantiateRendererFactory,\n        deps: [renderer_1.NativeScriptRendererFactory, browser_1.ɵAnimationEngine, core_1.NgZone]\n    }\n];\nvar NativeScriptAnimationsModule = (function () {\n    function NativeScriptAnimationsModule() {\n    }\n    return NativeScriptAnimationsModule;\n}());\nNativeScriptAnimationsModule = __decorate([\n    core_1.NgModule({\n        imports: [nativescript_module_1.NativeScriptModule],\n        providers: exports.NATIVESCRIPT_ANIMATIONS_PROVIDERS,\n    })\n], NativeScriptAnimationsModule);\nexports.NativeScriptAnimationsModule = NativeScriptAnimationsModule;\n//# sourceMappingURL=animations.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/collection-facade.js":"/* tslint:disable */\n//Copied unexported functions from @angular/core/src/facade/collection\nvar lang_facade_1 = require(\"./lang-facade\");\nfunction isListLikeIterable(obj) {\n    if (!lang_facade_1.isJsObject(obj))\n        return false;\n    return lang_facade_1.isArray(obj) ||\n        (!(obj instanceof Map) &&\n            lang_facade_1.getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop\n}\nexports.isListLikeIterable = isListLikeIterable;\nvar ListWrapper = (function () {\n    function ListWrapper() {\n    }\n    // JS has no way to express a statically fixed size list, but dart does so we\n    // keep both methods.\n    ListWrapper.createFixedSize = function (size) { return new Array(size); };\n    ListWrapper.createGrowableSize = function (size) { return new Array(size); };\n    ListWrapper.clone = function (array) { return array.slice(0); };\n    ListWrapper.forEachWithIndex = function (array, fn) {\n        for (var i = 0; i < array.length; i++) {\n            fn(array[i], i);\n        }\n    };\n    ListWrapper.first = function (array) {\n        if (!array)\n            return null;\n        return array[0];\n    };\n    ListWrapper.last = function (array) {\n        if (!array || array.length == 0)\n            return null;\n        return array[array.length - 1];\n    };\n    ListWrapper.indexOf = function (array, value, startIndex) {\n        if (startIndex === void 0) { startIndex = 0; }\n        return array.indexOf(value, startIndex);\n    };\n    ListWrapper.contains = function (list, el) { return list.indexOf(el) !== -1; };\n    ListWrapper.reversed = function (array) {\n        var a = ListWrapper.clone(array);\n        return a.reverse();\n    };\n    ListWrapper.concat = function (a, b) { return a.concat(b); };\n    ListWrapper.insert = function (list, index, value) { list.splice(index, 0, value); };\n    ListWrapper.removeAt = function (list, index) {\n        var res = list[index];\n        list.splice(index, 1);\n        return res;\n    };\n    ListWrapper.removeAll = function (list, items) {\n        for (var i = 0; i < items.length; ++i) {\n            var index = list.indexOf(items[i]);\n            list.splice(index, 1);\n        }\n    };\n    ListWrapper.remove = function (list, el) {\n        var index = list.indexOf(el);\n        if (index > -1) {\n            list.splice(index, 1);\n            return true;\n        }\n        return false;\n    };\n    ListWrapper.clear = function (list) { list.length = 0; };\n    ListWrapper.isEmpty = function (list) { return list.length == 0; };\n    ListWrapper.fill = function (list, value, start, end) {\n        if (start === void 0) { start = 0; }\n        if (end === void 0) { end = null; }\n        list.fill(value, start, end === null ? list.length : end);\n    };\n    ListWrapper.equals = function (a, b) {\n        if (a.length != b.length)\n            return false;\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i])\n                return false;\n        }\n        return true;\n    };\n    ListWrapper.slice = function (l, from, to) {\n        if (from === void 0) { from = 0; }\n        if (to === void 0) { to = null; }\n        return l.slice(from, to === null ? undefined : to);\n    };\n    ListWrapper.splice = function (l, from, length) { return l.splice(from, length); };\n    ListWrapper.sort = function (l, compareFn) {\n        if (lang_facade_1.isPresent(compareFn)) {\n            l.sort(compareFn);\n        }\n        else {\n            l.sort();\n        }\n    };\n    ListWrapper.toString = function (l) { return l.toString(); };\n    ListWrapper.toJSON = function (l) { return JSON.stringify(l); };\n    ListWrapper.maximum = function (list, predicate) {\n        if (list.length == 0) {\n            return null;\n        }\n        var solution = null;\n        var maxValue = -Infinity;\n        for (var index = 0; index < list.length; index++) {\n            var candidate = list[index];\n            if (lang_facade_1.isBlank(candidate)) {\n                continue;\n            }\n            var candidateValue = predicate(candidate);\n            if (candidateValue > maxValue) {\n                solution = candidate;\n                maxValue = candidateValue;\n            }\n        }\n        return solution;\n    };\n    ListWrapper.flatten = function (list) {\n        var target = [];\n        _flattenArray(list, target);\n        return target;\n    };\n    ListWrapper.addAll = function (list, source) {\n        for (var i = 0; i < source.length; i++) {\n            list.push(source[i]);\n        }\n    };\n    return ListWrapper;\n}());\nexports.ListWrapper = ListWrapper;\nfunction _flattenArray(source, target) {\n    if (lang_facade_1.isPresent(source)) {\n        for (var i = 0; i < source.length; i++) {\n            var item = source[i];\n            if (lang_facade_1.isArray(item)) {\n                _flattenArray(item, target);\n            }\n            else {\n                target.push(item);\n            }\n        }\n    }\n    return target;\n}\n//# sourceMappingURL=collection-facade.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/lang-facade.js":"/* tslint:disable */\n//Copied unexported functions from @angular/core/src/facade/lang\nvar globalScope = exports.global;\nexports.global = globalScope;\nfunction isPresent(obj) {\n    return obj !== undefined && obj !== null;\n}\nexports.isPresent = isPresent;\nfunction isBlank(obj) {\n    return obj === undefined || obj === null;\n}\nexports.isBlank = isBlank;\nfunction isNumber(obj) {\n    return typeof obj === 'number';\n}\nexports.isNumber = isNumber;\nfunction isDate(obj) {\n    return obj instanceof Date && !isNaN(obj.valueOf());\n}\nexports.isDate = isDate;\nfunction print(obj) {\n    console.log(obj);\n}\nexports.print = print;\nfunction isJsObject(o) {\n    return o !== null && (typeof o === 'function' || typeof o === 'object');\n}\nexports.isJsObject = isJsObject;\nfunction isArray(obj) {\n    return Array.isArray(obj);\n}\nexports.isArray = isArray;\nvar _symbolIterator = null;\nfunction getSymbolIterator() {\n    if (isBlank(_symbolIterator)) {\n        if (isPresent(globalScope.Symbol) && isPresent(Symbol.iterator)) {\n            _symbolIterator = Symbol.iterator;\n        }\n        else {\n            // es6-shim specific logic\n            var keys = Object.getOwnPropertyNames(Map.prototype);\n            for (var i = 0; i < keys.length; ++i) {\n                var key = keys[i];\n                if (key !== 'entries' && key !== 'size' &&\n                    Map.prototype[key] === Map.prototype['entries']) {\n                    _symbolIterator = key;\n                }\n            }\n        }\n    }\n    return _symbolIterator;\n}\nexports.getSymbolIterator = getSymbolIterator;\nfunction setValueOnPath(global, path, value) {\n    var parts = path.split('.');\n    var obj = global;\n    while (parts.length > 1) {\n        var name_1 = parts.shift();\n        if (obj.hasOwnProperty(name_1) && isPresent(obj[name_1])) {\n            obj = obj[name_1];\n        }\n        else {\n            obj = obj[name_1] = {};\n        }\n    }\n    if (obj === undefined || obj === null) {\n        obj = {};\n    }\n    obj[parts.shift()] = value;\n}\nexports.setValueOnPath = setValueOnPath;\n//# sourceMappingURL=lang-facade.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/directives.js":"var list_view_comp_1 = require(\"./directives/list-view-comp\");\nvar tab_view_1 = require(\"./directives/tab-view\");\nvar action_bar_1 = require(\"./directives/action-bar\");\nvar platform_filters_1 = require(\"./directives/platform-filters\");\nexports.NS_DIRECTIVES = [\n    list_view_comp_1.ListViewComponent,\n    list_view_comp_1.TemplateKeyDirective,\n    tab_view_1.TabViewDirective,\n    tab_view_1.TabViewItemDirective,\n    action_bar_1.ActionBarComponent,\n    action_bar_1.ActionBarScope,\n    action_bar_1.ActionItemDirective,\n    action_bar_1.NavigationButtonDirective,\n    platform_filters_1.AndroidFilterComponent,\n    platform_filters_1.IosFilterComponent,\n];\nvar list_view_comp_2 = require(\"./directives/list-view-comp\");\nexports.ListViewComponent = list_view_comp_2.ListViewComponent;\nexports.TemplateKeyDirective = list_view_comp_2.TemplateKeyDirective;\nvar text_value_accessor_1 = require(\"./value-accessors/text-value-accessor\");\nexports.TextValueAccessor = text_value_accessor_1.TextValueAccessor;\nvar checked_value_accessor_1 = require(\"./value-accessors/checked-value-accessor\");\nexports.CheckedValueAccessor = checked_value_accessor_1.CheckedValueAccessor;\nvar date_value_accessor_1 = require(\"./value-accessors/date-value-accessor\");\nexports.DateValueAccessor = date_value_accessor_1.DateValueAccessor;\nvar time_value_accessor_1 = require(\"./value-accessors/time-value-accessor\");\nexports.TimeValueAccessor = time_value_accessor_1.TimeValueAccessor;\nvar number_value_accessor_1 = require(\"./value-accessors/number-value-accessor\");\nexports.NumberValueAccessor = number_value_accessor_1.NumberValueAccessor;\nvar selectedIndex_value_accessor_1 = require(\"./value-accessors/selectedIndex-value-accessor\");\nexports.SelectedIndexValueAccessor = selectedIndex_value_accessor_1.SelectedIndexValueAccessor;\nvar tab_view_2 = require(\"./directives/tab-view\");\nexports.TabViewDirective = tab_view_2.TabViewDirective;\nexports.TabViewItemDirective = tab_view_2.TabViewItemDirective;\nvar action_bar_2 = require(\"./directives/action-bar\");\nexports.ActionBarComponent = action_bar_2.ActionBarComponent;\nexports.ActionBarScope = action_bar_2.ActionBarScope;\nexports.ActionItemDirective = action_bar_2.ActionItemDirective;\nexports.NavigationButtonDirective = action_bar_2.NavigationButtonDirective;\nvar platform_filters_2 = require(\"./directives/platform-filters\");\nexports.AndroidFilterComponent = platform_filters_2.AndroidFilterComponent;\nexports.IosFilterComponent = platform_filters_2.IosFilterComponent;\n//# sourceMappingURL=directives.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/directives/list-view-comp.js":"var core_1 = require(\"@angular/core\");\nvar lang_facade_1 = require(\"../lang-facade\");\nvar collection_facade_1 = require(\"../collection-facade\");\nvar observable_array_1 = require(\"data/observable-array\");\nvar layout_base_1 = require(\"ui/layouts/layout-base\");\nvar trace_1 = require(\"../trace\");\nvar NG_VIEW = \"_ngViewRef\";\nvar ListItemContext = (function () {\n    function ListItemContext($implicit, item, index, even, odd) {\n        this.$implicit = $implicit;\n        this.item = item;\n        this.index = index;\n        this.even = even;\n        this.odd = odd;\n    }\n    return ListItemContext;\n}());\nexports.ListItemContext = ListItemContext;\nvar ListViewComponent = (function () {\n    function ListViewComponent(_elementRef, _iterableDiffers, _cdr) {\n        this._iterableDiffers = _iterableDiffers;\n        this._cdr = _cdr;\n        this.setupItemView = new core_1.EventEmitter();\n        this.listView = _elementRef.nativeElement;\n        this.listView.on(\"itemLoading\", this.onItemLoading, this);\n    }\n    Object.defineProperty(ListViewComponent.prototype, \"nativeElement\", {\n        get: function () {\n            return this.listView;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ListViewComponent.prototype, \"items\", {\n        get: function () {\n            return this._items;\n        },\n        set: function (value) {\n            this._items = value;\n            var needDiffer = true;\n            if (value instanceof observable_array_1.ObservableArray) {\n                needDiffer = false;\n            }\n            if (needDiffer && !this._differ && collection_facade_1.isListLikeIterable(value)) {\n                this._differ = this._iterableDiffers.find(this._items)\n                    .create(this._cdr, function (_index, item) { return item; });\n            }\n            this.listView.items = this._items;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ListViewComponent.prototype.ngAfterContentInit = function () {\n        trace_1.listViewLog(\"ListView.ngAfterContentInit()\");\n        this.setItemTemplates();\n    };\n    ListViewComponent.prototype.ngOnDestroy = function () {\n        this.listView.off(\"itemLoading\", this.onItemLoading, this);\n    };\n    ListViewComponent.prototype.setItemTemplates = function () {\n        // The itemTemplateQuery may be changed after list items are added that contain <template> inside,\n        // so cache and use only the original template to avoid errors.\n        this.itemTemplate = this.itemTemplateQuery;\n        if (this._templateMap) {\n            trace_1.listViewLog(\"Setting templates\");\n            var templates_1 = [];\n            this._templateMap.forEach(function (value) {\n                templates_1.push(value);\n            });\n            this.listView.itemTemplates = templates_1;\n        }\n    };\n    ListViewComponent.prototype.registerTemplate = function (key, template) {\n        var _this = this;\n        trace_1.listViewLog(\"registerTemplate for key: \" + key);\n        if (!this._templateMap) {\n            this._templateMap = new Map();\n        }\n        var keyedTemplate = {\n            key: key,\n            createView: function () {\n                trace_1.listViewLog(\"registerTemplate for key: \" + key);\n                var viewRef = _this.loader.createEmbeddedView(template, new ListItemContext(), 0);\n                var resultView = getSingleViewFromViewRef(viewRef);\n                resultView[NG_VIEW] = viewRef;\n                return resultView;\n            }\n        };\n        this._templateMap.set(key, keyedTemplate);\n    };\n    ListViewComponent.prototype.onItemLoading = function (args) {\n        if (!args.view && !this.itemTemplate) {\n            return;\n        }\n        var index = args.index;\n        var items = args.object.items;\n        var currentItem = typeof (items.getItem) === \"function\" ?\n            items.getItem(index) : items[index];\n        var viewRef;\n        if (args.view) {\n            trace_1.listViewLog(\"onItemLoading: \" + index + \" - Reusing existing view\");\n            viewRef = args.view[NG_VIEW];\n            // getting angular view from original element (in cases when ProxyViewContainer\n            // is used NativeScript internally wraps it in a StackLayout)\n            if (!viewRef) {\n                viewRef = (args.view._subViews && args.view._subViews.length > 0) ?\n                    args.view._subViews[0][NG_VIEW] : undefined;\n            }\n        }\n        else {\n            trace_1.listViewLog(\"onItemLoading: \" + index + \" - Creating view from template\");\n            viewRef = this.loader.createEmbeddedView(this.itemTemplate, new ListItemContext(), 0);\n            args.view = getSingleViewFromViewRef(viewRef);\n            args.view[NG_VIEW] = viewRef;\n        }\n        this.setupViewRef(viewRef, currentItem, index);\n        this.detectChangesOnChild(viewRef, index);\n    };\n    ListViewComponent.prototype.setupViewRef = function (viewRef, data, index) {\n        if (lang_facade_1.isBlank(viewRef)) {\n            return;\n        }\n        var context = viewRef.context;\n        context.$implicit = data;\n        context.item = data;\n        context.index = index;\n        context.even = (index % 2 === 0);\n        context.odd = !context.even;\n        this.setupItemView.next({ view: viewRef, data: data, index: index, context: context });\n    };\n    ListViewComponent.prototype.detectChangesOnChild = function (viewRef, index) {\n        // Manually detect changes in child view ref\n        // TODO: Is there a better way of getting viewRef\"s change detector\n        var childChangeDetector = viewRef;\n        trace_1.listViewLog(\"Manually detect changes in child: \" + index);\n        childChangeDetector.markForCheck();\n        childChangeDetector.detectChanges();\n    };\n    ListViewComponent.prototype.ngDoCheck = function () {\n        if (this._differ) {\n            trace_1.listViewLog(\"ngDoCheck() - execute differ\");\n            var changes = this._differ.diff(this._items);\n            if (changes) {\n                trace_1.listViewLog(\"ngDoCheck() - refresh\");\n                this.listView.refresh();\n            }\n        }\n    };\n    return ListViewComponent;\n}());\n__decorate([\n    core_1.ViewChild(\"loader\", { read: core_1.ViewContainerRef }),\n    __metadata(\"design:type\", core_1.ViewContainerRef)\n], ListViewComponent.prototype, \"loader\", void 0);\n__decorate([\n    core_1.Output(),\n    __metadata(\"design:type\", Object)\n], ListViewComponent.prototype, \"setupItemView\", void 0);\n__decorate([\n    core_1.ContentChild(core_1.TemplateRef),\n    __metadata(\"design:type\", core_1.TemplateRef)\n], ListViewComponent.prototype, \"itemTemplateQuery\", void 0);\n__decorate([\n    core_1.Input(),\n    __metadata(\"design:type\", Object),\n    __metadata(\"design:paramtypes\", [Object])\n], ListViewComponent.prototype, \"items\", null);\nListViewComponent = __decorate([\n    core_1.Component({\n        selector: \"ListView\",\n        template: \"\\n        <DetachedContainer>\\n            <Placeholder #loader></Placeholder>\\n        </DetachedContainer>\",\n        changeDetection: core_1.ChangeDetectionStrategy.OnPush\n    }),\n    __metadata(\"design:paramtypes\", [core_1.ElementRef,\n        core_1.IterableDiffers,\n        core_1.ChangeDetectorRef])\n], ListViewComponent);\nexports.ListViewComponent = ListViewComponent;\nfunction getSingleViewRecursive(nodes, nestLevel) {\n    var actualNodes = nodes.filter(function (n) { return !!n && n.nodeName !== \"#text\"; });\n    if (actualNodes.length === 0) {\n        throw new Error(\"No suitable views found in list template! Nesting level: \" + nestLevel);\n    }\n    else if (actualNodes.length > 1) {\n        throw new Error(\"More than one view found in list template! Nesting level: \" + nestLevel);\n    }\n    else {\n        if (actualNodes[0]) {\n            var parentLayout = actualNodes[0].parent;\n            if (parentLayout instanceof layout_base_1.LayoutBase) {\n                parentLayout.removeChild(actualNodes[0]);\n            }\n            return actualNodes[0];\n        }\n        else {\n            return getSingleViewRecursive(actualNodes[0].children, nestLevel + 1);\n        }\n    }\n}\nfunction getSingleViewFromViewRef(viewRef) {\n    return getSingleViewRecursive(viewRef.rootNodes, 0);\n}\nvar TemplateKeyDirective = (function () {\n    function TemplateKeyDirective(templateRef, list) {\n        this.templateRef = templateRef;\n        this.list = list;\n    }\n    Object.defineProperty(TemplateKeyDirective.prototype, \"nsTemplateKey\", {\n        set: function (value) {\n            if (this.list && this.templateRef) {\n                this.list.registerTemplate(value, this.templateRef);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return TemplateKeyDirective;\n}());\n__decorate([\n    core_1.Input(),\n    __metadata(\"design:type\", Object),\n    __metadata(\"design:paramtypes\", [Object])\n], TemplateKeyDirective.prototype, \"nsTemplateKey\", null);\nTemplateKeyDirective = __decorate([\n    core_1.Directive({ selector: \"[nsTemplateKey]\" }),\n    __param(1, core_1.Host()),\n    __metadata(\"design:paramtypes\", [core_1.TemplateRef,\n        ListViewComponent])\n], TemplateKeyDirective);\nexports.TemplateKeyDirective = TemplateKeyDirective;\n//# sourceMappingURL=list-view-comp.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/dom-adapter.js":"var trace_1 = require(\"./trace\");\nvar lang_facade_1 = require(\"./lang-facade\");\nvar NativeScriptDomAdapter = (function () {\n    function NativeScriptDomAdapter() {\n        this.resourceLoaderType = null;\n    }\n    NativeScriptDomAdapter.makeCurrent = function () {\n        // Don't register when bundling (likely AoT setup).\n        if (!global.TNS_WEBPACK) {\n            try {\n                var privateAPI = global.require(\"@angular/platform-browser\");\n                var setRootDomAdapter = privateAPI.ɵsetRootDomAdapter;\n                trace_1.rendererLog(\"Setting root DOM adapter...\");\n                setRootDomAdapter(new NativeScriptDomAdapter());\n            }\n            catch (e) {\n                trace_1.rendererLog(\"@angular/platform-browser package not present. NOT setting root DOM adapter...\");\n            }\n        }\n    };\n    NativeScriptDomAdapter.prototype.hasProperty = function (_element, _name) {\n        // TODO: actually check if the property exists.\n        return true;\n    };\n    NativeScriptDomAdapter.prototype.log = function (arg) {\n        lang_facade_1.print(arg);\n    };\n    NativeScriptDomAdapter.prototype.logError = function (arg) {\n        lang_facade_1.print(arg);\n    };\n    NativeScriptDomAdapter.prototype.logGroup = function (arg) {\n        lang_facade_1.print(arg);\n    };\n    NativeScriptDomAdapter.prototype.logGroupEnd = function () {\n    };\n    Object.defineProperty(NativeScriptDomAdapter.prototype, \"attrToPropMap\", {\n        get: function () { throw new Error(\"Not implemented!\"); },\n        set: function (_value) { throw new Error(\"Not implemented!\"); },\n        enumerable: true,\n        configurable: true\n    });\n    ;\n    ;\n    NativeScriptDomAdapter.prototype.setProperty = function (_el, _name, _value) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.getProperty = function (_el, _name) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.invoke = function (_el, _methodName, _args) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.contains = function (_nodeA, _nodeB) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.parse = function (_templateHtml) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.query = function (_selector) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.querySelector = function (_el /** TODO #9100 */, _selector) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.querySelectorAll = function (_el /** TODO #9100 */, _selector) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.on = function (_el /** TODO #9100 */, _evt /** TODO #9100 */, _listener /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.onAndCancel = function (_el /** TODO #9100 */, _evt /** TODO #9100 */, _listener /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.dispatchEvent = function (_el /** TODO #9100 */, _evt /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.createMouseEvent = function (_eventType /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.createEvent = function (_eventType) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.preventDefault = function (_evt /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.isPrevented = function (_evt /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.getInnerHTML = function (_el /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.getTemplateContent = function (_el /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.getOuterHTML = function (_el /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.nodeName = function (_node /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.nodeValue = function (_node /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.type = function (_node /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.content = function (_node /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.firstChild = function (_el /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.nextSibling = function (_el /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.parentElement = function (_el /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.childNodes = function (_el /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.childNodesAsList = function (_el /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.clearNodes = function (_el /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.appendChild = function (_el /** TODO #9100 */, _node /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.removeChild = function (_el /** TODO #9100 */, _node /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.replaceChild = function (_el /** TODO #9100 */, _newNode /** TODO #9100 */, _oldNode /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.remove = function (_el /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.insertBefore = function (_el /** TODO #9100 */, _node /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.insertAllBefore = function (_el /** TODO #9100 */, _nodes /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.insertAfter = function (_el /** TODO #9100 */, _node /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.setInnerHTML = function (_el /** TODO #9100 */, _value /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.getText = function (_el /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.setText = function (_el /** TODO #9100 */, _value) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.getValue = function (_el /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.setValue = function (_el /** TODO #9100 */, _value) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.getChecked = function (_el /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.setChecked = function (_el /** TODO #9100 */, _value) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.createComment = function (_text) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.createTemplate = function (_html /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.createElement = function (_tagName /** TODO #9100 */, _doc /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.createElementNS = function (_ns, _tagName, _doc /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.createTextNode = function (_text, _doc /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.createScriptTag = function (_attrName, _attrValue, _doc /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.createStyleElement = function (_css, _doc /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.createShadowRoot = function (_el /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.getShadowRoot = function (_el /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.getHost = function (_el /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.getDistributedNodes = function (_el /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.clone /*<T extends Node>*/ = function (_node /*T*/) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.getElementsByClassName = function (_element /** TODO #9100 */, _name) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.getElementsByTagName = function (_element /** TODO #9100 */, _name) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.classList = function (_element /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.addClass = function (_element /** TODO #9100 */, _className) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.removeClass = function (_element /** TODO #9100 */, _className) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.hasClass = function (_element /** TODO #9100 */, _className) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.setStyle = function (_element /** TODO #9100 */, _styleName, _styleValue) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.removeStyle = function (_element /** TODO #9100 */, _styleName) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.getStyle = function (_element /** TODO #9100 */, _styleName) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.hasStyle = function (_element /** TODO #9100 */, _styleName, _styleValue) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.tagName = function (_element /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.attributeMap = function (_element /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.hasAttribute = function (_element /** TODO #9100 */, _attribute) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.hasAttributeNS = function (_element /** TODO #9100 */, _ns, _attribute) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.getAttribute = function (_element /** TODO #9100 */, _attribute) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.getAttributeNS = function (_element /** TODO #9100 */, _ns, _attribute) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.setAttribute = function (_element /** TODO #9100 */, _name, _value) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.setAttributeNS = function (_element /** TODO #9100 */, _ns, _name, _value) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.removeAttribute = function (_element /** TODO #9100 */, _attribute) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.removeAttributeNS = function (_element /** TODO #9100 */, _ns, _attribute) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.templateAwareRoot = function (_el /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.createHtmlDocument = function () { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.defaultDoc = function () { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.getBoundingClientRect = function (_el /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.getTitle = function () { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.setTitle = function (_doc, _newTitle) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.elementMatches = function (_n /** TODO #9100 */, _selector) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.isTemplateElement = function (_el) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.isTextNode = function (_node /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.isCommentNode = function (_node /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.isElementNode = function (_node /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.hasShadowRoot = function (_node /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.isShadowRoot = function (_node /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.importIntoDoc /*<T extends Node>*/ = function (_node /*T*/) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.adoptNode /*<T extends Node>*/ = function (_node /*T*/) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.getHref = function (_element /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.getEventKey = function (_event /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.resolveAndSetHref = function (_element /** TODO #9100 */, _baseUrl, _href) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.supportsDOMEvents = function () { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.supportsNativeShadowDOM = function () { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.getGlobalEventTarget = function (_doc, _target) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.getHistory = function () { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.getLocation = function () { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.getBaseHref = function () { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.resetBaseElement = function () { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.getUserAgent = function () { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.setData = function (_element /** TODO #9100 */, _name, _value) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.getComputedStyle = function (_element /** TODO #9100 */) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.getData = function (_element /** TODO #9100 */, _name) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.setGlobalVar = function (_name, _value) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.supportsWebAnimation = function () { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.performanceNow = function () { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.getAnimationPrefix = function () { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.getTransitionEnd = function () { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.supportsAnimation = function () { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.supportsCookies = function () { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.getCookie = function (_name) { throw new Error(\"Not implemented!\"); };\n    NativeScriptDomAdapter.prototype.setCookie = function (_name, _value) { throw new Error(\"Not implemented!\"); };\n    return NativeScriptDomAdapter;\n}());\nexports.NativeScriptDomAdapter = NativeScriptDomAdapter;\nNativeScriptDomAdapter.makeCurrent();\n//# sourceMappingURL=dom-adapter.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/trace.js":"var trace_1 = require(\"trace\");\nexports.rendererTraceCategory = \"ns-renderer\";\nexports.routerTraceCategory = \"ns-router\";\nexports.listViewTraceCategory = \"ns-list-view\";\nfunction rendererLog(msg) {\n    trace_1.write(msg, exports.rendererTraceCategory);\n}\nexports.rendererLog = rendererLog;\nfunction rendererError(message) {\n    trace_1.write(message, exports.rendererTraceCategory, trace_1.messageType.error);\n}\nexports.rendererError = rendererError;\nfunction routerLog(message) {\n    trace_1.write(message, exports.routerTraceCategory);\n}\nexports.routerLog = routerLog;\nfunction styleError(message) {\n    trace_1.write(message, trace_1.categories.Style, trace_1.messageType.error);\n}\nexports.styleError = styleError;\nfunction listViewLog(message) {\n    trace_1.write(message, exports.listViewTraceCategory);\n}\nexports.listViewLog = listViewLog;\n//# sourceMappingURL=trace.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/element-registry.js":"var defaultViewMeta = {\n    skipAddToDom: false,\n};\nvar elementMap = new Map();\nvar camelCaseSplit = /([a-z0-9])([A-Z])/g;\nfunction registerElement(elementName, resolver, meta) {\n    if (elementMap.has(elementName)) {\n        throw new Error(\"Element for \" + elementName + \" already registered.\");\n    }\n    else {\n        var entry = { resolver: resolver, meta: meta };\n        elementMap.set(elementName, entry);\n        elementMap.set(elementName.toLowerCase(), entry);\n        elementMap.set(elementName.replace(camelCaseSplit, \"$1-$2\").toLowerCase(), entry);\n    }\n}\nexports.registerElement = registerElement;\nfunction getViewClass(elementName) {\n    var entry = elementMap.get(elementName) ||\n        elementMap.get(elementName.toLowerCase());\n    if (!entry) {\n        throw new TypeError(\"No known component for element \" + elementName + \".\");\n    }\n    try {\n        return entry.resolver();\n    }\n    catch (e) {\n        throw new TypeError(\"Could not load view for: \" + elementName + \".\" + e);\n    }\n}\nexports.getViewClass = getViewClass;\nfunction getViewMeta(nodeName) {\n    var meta = defaultViewMeta;\n    var entry = elementMap.get(nodeName) || elementMap.get(nodeName.toLowerCase());\n    if (entry && entry.meta) {\n        meta = entry.meta;\n    }\n    return meta;\n}\nexports.getViewMeta = getViewMeta;\nfunction isKnownView(elementName) {\n    return elementMap.has(elementName) ||\n        elementMap.has(elementName.toLowerCase());\n}\nexports.isKnownView = isKnownView;\n// Register default NativeScript components\n// Note: ActionBar related components are registerd together with action-bar directives.\nregisterElement(\"AbsoluteLayout\", function () { return require(\"ui/layouts/absolute-layout\").AbsoluteLayout; });\nregisterElement(\"ActivityIndicator\", function () { return require(\"ui/activity-indicator\").ActivityIndicator; });\nregisterElement(\"Border\", function () { return require(\"ui/border\").Border; });\nregisterElement(\"Button\", function () { return require(\"ui/button\").Button; });\nregisterElement(\"ContentView\", function () { return require(\"ui/content-view\").ContentView; });\nregisterElement(\"DatePicker\", function () { return require(\"ui/date-picker\").DatePicker; });\nregisterElement(\"DockLayout\", function () { return require(\"ui/layouts/dock-layout\").DockLayout; });\nregisterElement(\"GridLayout\", function () { return require(\"ui/layouts/grid-layout\").GridLayout; });\nregisterElement(\"HtmlView\", function () { return require(\"ui/html-view\").HtmlView; });\nregisterElement(\"Image\", function () { return require(\"ui/image\").Image; });\n// Parse5 changes <Image> tags to <img>. WTF!\nregisterElement(\"img\", function () { return require(\"ui/image\").Image; });\nregisterElement(\"Label\", function () { return require(\"ui/label\").Label; });\nregisterElement(\"ListPicker\", function () { return require(\"ui/list-picker\").ListPicker; });\nregisterElement(\"ListView\", function () { return require(\"ui/list-view\").ListView; });\nregisterElement(\"Page\", function () { return require(\"ui/page\").Page; });\nregisterElement(\"Placeholder\", function () { return require(\"ui/placeholder\").Placeholder; });\nregisterElement(\"Progress\", function () { return require(\"ui/progress\").Progress; });\nregisterElement(\"ProxyViewContainer\", function () { return require(\"ui/proxy-view-container\").ProxyViewContainer; });\nregisterElement(\"Repeater\", function () { return require(\"ui/repeater\").Repeater; });\nregisterElement(\"ScrollView\", function () { return require(\"ui/scroll-view\").ScrollView; });\nregisterElement(\"SearchBar\", function () { return require(\"ui/search-bar\").SearchBar; });\nregisterElement(\"SegmentedBar\", function () { return require(\"ui/segmented-bar\").SegmentedBar; });\nregisterElement(\"SegmentedBarItem\", function () { return require(\"ui/segmented-bar\").SegmentedBarItem; });\nregisterElement(\"Slider\", function () { return require(\"ui/slider\").Slider; });\nregisterElement(\"StackLayout\", function () { return require(\"ui/layouts/stack-layout\").StackLayout; });\nregisterElement(\"FlexboxLayout\", function () { return require(\"ui/layouts/flexbox-layout\").FlexboxLayout; });\nregisterElement(\"Switch\", function () { return require(\"ui/switch\").Switch; });\nregisterElement(\"TabView\", function () { return require(\"ui/tab-view\").TabView; });\nregisterElement(\"TextField\", function () { return require(\"ui/text-field\").TextField; });\nregisterElement(\"TextView\", function () { return require(\"ui/text-view\").TextView; });\nregisterElement(\"TimePicker\", function () { return require(\"ui/time-picker\").TimePicker; });\nregisterElement(\"WebView\", function () { return require(\"ui/web-view\").WebView; });\nregisterElement(\"WrapLayout\", function () { return require(\"ui/layouts/wrap-layout\").WrapLayout; });\nregisterElement(\"FormattedString\", function () { return require(\"text/formatted-string\").FormattedString; });\nregisterElement(\"Span\", function () { return require(\"text/span\").Span; });\nregisterElement(\"DetachedContainer\", function () { return require(\"ui/proxy-view-container\").ProxyViewContainer; }, { skipAddToDom: true });\nregisterElement(\"DetachedText\", function () { return require(\"ui/placeholder\").Placeholder; }, { skipAddToDom: true });\nregisterElement(\"Comment\", function () { return require(\"ui/placeholder\").Placeholder; }, { skipAddToDom: false });\n//# sourceMappingURL=element-registry.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/forms.js":"var core_1 = require(\"@angular/core\");\nvar forms_1 = require(\"@angular/forms\");\nvar text_value_accessor_1 = require(\"./value-accessors/text-value-accessor\");\nvar checked_value_accessor_1 = require(\"./value-accessors/checked-value-accessor\");\nvar date_value_accessor_1 = require(\"./value-accessors/date-value-accessor\");\nvar time_value_accessor_1 = require(\"./value-accessors/time-value-accessor\");\nvar number_value_accessor_1 = require(\"./value-accessors/number-value-accessor\");\nvar selectedIndex_value_accessor_1 = require(\"./value-accessors/selectedIndex-value-accessor\");\nexports.FORMS_DIRECTIVES = [\n    text_value_accessor_1.TextValueAccessor,\n    checked_value_accessor_1.CheckedValueAccessor,\n    date_value_accessor_1.DateValueAccessor,\n    time_value_accessor_1.TimeValueAccessor,\n    selectedIndex_value_accessor_1.SelectedIndexValueAccessor,\n    number_value_accessor_1.NumberValueAccessor,\n];\nvar NativeScriptFormsModule = (function () {\n    function NativeScriptFormsModule() {\n    }\n    return NativeScriptFormsModule;\n}());\nNativeScriptFormsModule = __decorate([\n    core_1.NgModule({\n        declarations: exports.FORMS_DIRECTIVES,\n        providers: [],\n        imports: [\n            forms_1.FormsModule\n        ],\n        exports: [\n            forms_1.FormsModule,\n            exports.FORMS_DIRECTIVES,\n        ]\n    })\n], NativeScriptFormsModule);\nexports.NativeScriptFormsModule = NativeScriptFormsModule;\n//# sourceMappingURL=forms.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/value-accessors/text-value-accessor.js":"var core_1 = require(\"@angular/core\");\nvar forms_1 = require(\"@angular/forms\");\nvar lang_facade_1 = require(\"../lang-facade\");\nvar base_value_accessor_1 = require(\"./base-value-accessor\");\nvar TEXT_VALUE_ACCESSOR = { provide: forms_1.NG_VALUE_ACCESSOR,\n    useExisting: core_1.forwardRef(function () { return TextValueAccessor; }), multi: true };\n/**\n * The accessor for writing a text and listening to changes that is used by the\n * {@link NgModel} directives.\n *\n *  ### Example\n *  ```\n *  <TextField [(ngModel)]=\"model.test\">\n *  ```\n */\nvar TextValueAccessor = (function (_super) {\n    __extends(TextValueAccessor, _super);\n    function TextValueAccessor(elementRef) {\n        var _this = _super.call(this, elementRef.nativeElement) || this;\n        _this.onTouched = function () { };\n        return _this;\n    }\n    TextValueAccessor.prototype.textChangeListener = function (event) {\n        this.onChange(event.value);\n    };\n    TextValueAccessor.prototype.writeValue = function (value) {\n        var normalizedValue = lang_facade_1.isBlank(value) ? \"\" : value.toString();\n        this.view.text = normalizedValue;\n    };\n    TextValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n    return TextValueAccessor;\n}(base_value_accessor_1.BaseValueAccessor));\n__decorate([\n    core_1.HostListener(\"textChange\", [\"$event\"]),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object]),\n    __metadata(\"design:returntype\", void 0)\n], TextValueAccessor.prototype, \"textChangeListener\", null);\nTextValueAccessor = __decorate([\n    core_1.Directive({\n        // tslint:disable-next-line:max-line-length directive-selector\n        selector: \"TextField[ngModel], TextField[formControlName], textField[ngModel], textField[formControlName], text-field[ngModel], text-field[formControlName], TextView[ngModel], TextView[formControlName], textView[ngModel], textView[formControlName], text-view[ngModel], text-view[formControlName], SearchBar[ngModel], SearchBar[formControlName], searchBar[ngModel], searchBar[formControlName], search-bar[ngModel], search-bar[formControlName]\",\n        providers: [TEXT_VALUE_ACCESSOR]\n    }),\n    __metadata(\"design:paramtypes\", [core_1.ElementRef])\n], TextValueAccessor);\nexports.TextValueAccessor = TextValueAccessor;\n//# sourceMappingURL=text-value-accessor.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/value-accessors/base-value-accessor.js":"var BaseValueAccessor = (function () {\n    function BaseValueAccessor(view) {\n        this.view = view;\n        this.onChange = function (_) { };\n        this.pendingChangeNotification = 0;\n    }\n    BaseValueAccessor.prototype.registerOnChange = function (fn) {\n        var _this = this;\n        this.onChange = function (arg) {\n            if (_this.pendingChangeNotification) {\n                clearTimeout(_this.pendingChangeNotification);\n            }\n            _this.pendingChangeNotification = setTimeout(function () {\n                _this.pendingChangeNotification = 0;\n                fn(arg);\n            }, 20);\n        };\n    };\n    BaseValueAccessor.prototype.writeValue = function (_) {\n        //\n    };\n    BaseValueAccessor.prototype.registerOnTouched = function (_) {\n        //\n    };\n    return BaseValueAccessor;\n}());\nexports.BaseValueAccessor = BaseValueAccessor;\n//# sourceMappingURL=base-value-accessor.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/http.js":"var http_1 = require(\"@angular/http\");\nvar ns_http_1 = require(\"./http/ns-http\");\nvar ns_file_system_1 = require(\"./file-system/ns-file-system\");\nvar core_1 = require(\"@angular/core\");\nvar http_2 = require(\"@angular/http\");\nvar ns_http_2 = require(\"./http/ns-http\");\nexports.NSHttp = ns_http_2.NSHttp;\nfunction nsHttpFactory(backend, options, nsFileSystem) {\n    return new ns_http_1.NSHttp(backend, options, nsFileSystem);\n}\nexports.nsHttpFactory = nsHttpFactory;\n;\nfunction nsXSRFStrategyFactory() {\n    return new ns_http_1.NSXSRFStrategy();\n}\nexports.nsXSRFStrategyFactory = nsXSRFStrategyFactory;\n;\nvar NativeScriptHttpModule = (function () {\n    function NativeScriptHttpModule() {\n    }\n    return NativeScriptHttpModule;\n}());\nNativeScriptHttpModule = __decorate([\n    core_1.NgModule({\n        providers: [\n            { provide: http_2.XSRFStrategy, useFactory: nsXSRFStrategyFactory },\n            ns_file_system_1.NSFileSystem,\n            { provide: http_1.Http, useFactory: nsHttpFactory,\n                deps: [http_1.XHRBackend, http_1.RequestOptions, ns_file_system_1.NSFileSystem] }\n        ],\n        imports: [\n            http_2.HttpModule,\n        ],\n        exports: [\n            http_2.HttpModule,\n        ]\n    })\n], NativeScriptHttpModule);\nexports.NativeScriptHttpModule = NativeScriptHttpModule;\n//# sourceMappingURL=http.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/http/ns-http.js":"var core_1 = require(\"@angular/core\");\nvar http_1 = require(\"@angular/http\");\nvar Observable_1 = require(\"rxjs/Observable\");\nrequire(\"rxjs/add/observable/fromPromise\");\nvar ns_file_system_1 = require(\"../file-system/ns-file-system\");\nvar NSXSRFStrategy = (function () {\n    function NSXSRFStrategy() {\n    }\n    NSXSRFStrategy.prototype.configureRequest = function (_req) {\n        // noop\n    };\n    return NSXSRFStrategy;\n}());\nexports.NSXSRFStrategy = NSXSRFStrategy;\nvar NSHttp = (function (_super) {\n    __extends(NSHttp, _super);\n    function NSHttp(backend, defaultOptions, nsFileSystem) {\n        var _this = _super.call(this, backend, defaultOptions) || this;\n        _this.nsFileSystem = nsFileSystem;\n        return _this;\n    }\n    /**\n     * Performs a request with `get` http method.\n     * Uses a local file if `~/` resource is requested.\n     */\n    NSHttp.prototype.get = function (url, options) {\n        var _this = this;\n        if (url.indexOf(\"~\") === 0 || url.indexOf(\"/\") === 0) {\n            // normalize url\n            url = url.replace(\"~\", \"\").replace(\"/\", \"\");\n            // request from local app resources\n            return Observable_1.Observable.fromPromise(new Promise(function (resolve, reject) {\n                var app = _this.nsFileSystem.currentApp();\n                var localFile = app.getFile(url);\n                if (localFile) {\n                    localFile.readText().then(function (data) {\n                        resolve(responseOptions(data, 200, url));\n                    }, function (err) {\n                        reject(responseOptions(err, 400, url));\n                    });\n                }\n                else {\n                    reject(responseOptions(\"Not Found\", 404, url));\n                }\n            }));\n        }\n        else {\n            return _super.prototype.get.call(this, url, options);\n        }\n    };\n    return NSHttp;\n}(http_1.Http));\nNSHttp = __decorate([\n    core_1.Injectable(),\n    __metadata(\"design:paramtypes\", [http_1.ConnectionBackend, http_1.RequestOptions, ns_file_system_1.NSFileSystem])\n], NSHttp);\nexports.NSHttp = NSHttp;\nfunction responseOptions(body, status, url) {\n    return new http_1.Response(new http_1.ResponseOptions({\n        body: body,\n        status: status,\n        statusText: \"OK\",\n        type: status === 200 ? http_1.ResponseType.Default : http_1.ResponseType.Error,\n        url: url\n    }));\n}\n//# sourceMappingURL=ns-http.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/file-system/ns-file-system.js":"var core_1 = require(\"@angular/core\");\nvar file_system_1 = require(\"file-system\");\n// Allows greater flexibility with `file-system` and Angular\n// Also provides a way for `file-system` to be mocked for testing\nvar NSFileSystem = (function () {\n    function NSFileSystem() {\n    }\n    NSFileSystem.prototype.currentApp = function () {\n        return file_system_1.knownFolders.currentApp();\n    };\n    return NSFileSystem;\n}());\nNSFileSystem = __decorate([\n    core_1.Injectable()\n], NSFileSystem);\nexports.NSFileSystem = NSFileSystem;\n//# sourceMappingURL=ns-file-system.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/modal-dialog.js":"var dialogs_1 = require(\"./directives/dialogs\");\nexports.ModalDialogHost = dialogs_1.ModalDialogHost;\nexports.ModalDialogParams = dialogs_1.ModalDialogParams;\nexports.ModalDialogService = dialogs_1.ModalDialogService;\n//# sourceMappingURL=modal-dialog.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/directives/dialogs.js":"var core_1 = require(\"@angular/core\");\nvar page_1 = require(\"ui/page\");\nvar detached_loader_1 = require(\"../common/detached-loader\");\nvar platform_providers_1 = require(\"../platform-providers\");\nvar ModalDialogParams = (function () {\n    function ModalDialogParams(context, closeCallback) {\n        if (context === void 0) { context = {}; }\n        this.context = context;\n        this.closeCallback = closeCallback;\n    }\n    return ModalDialogParams;\n}());\nexports.ModalDialogParams = ModalDialogParams;\nvar ModalDialogService = ModalDialogService_1 = (function () {\n    function ModalDialogService() {\n    }\n    ModalDialogService.prototype.showModal = function (type, options) {\n        if (!options.viewContainerRef) {\n            throw new Error(\"No viewContainerRef: Make sure you pass viewContainerRef in ModalDialogOptions.\");\n        }\n        var viewContainerRef = options.viewContainerRef;\n        var parentPage = viewContainerRef.injector.get(page_1.Page);\n        var resolver = viewContainerRef.injector.get(core_1.ComponentFactoryResolver);\n        var pageFactory = viewContainerRef.injector.get(platform_providers_1.PAGE_FACTORY);\n        return new Promise(function (resolve) {\n            setTimeout(function () { return ModalDialogService_1.showDialog(type, options, resolve, viewContainerRef, resolver, parentPage, pageFactory); }, 10);\n        });\n    };\n    ModalDialogService.showDialog = function (type, options, doneCallback, containerRef, resolver, parentPage, pageFactory) {\n        var page = pageFactory({ isModal: true, componentType: type });\n        var detachedLoaderRef;\n        var closeCallback = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            doneCallback.apply(undefined, args);\n            page.closeModal();\n            detachedLoaderRef.instance.detectChanges();\n            detachedLoaderRef.destroy();\n        };\n        var modalParams = new ModalDialogParams(options.context, closeCallback);\n        var providers = core_1.ReflectiveInjector.resolve([\n            { provide: page_1.Page, useValue: page },\n            { provide: ModalDialogParams, useValue: modalParams },\n        ]);\n        var childInjector = core_1.ReflectiveInjector.fromResolvedProviders(providers, containerRef.parentInjector);\n        var detachedFactory = resolver.resolveComponentFactory(detached_loader_1.DetachedLoader);\n        detachedLoaderRef = containerRef.createComponent(detachedFactory, -1, childInjector, null);\n        detachedLoaderRef.instance.loadComponent(type).then(function (compRef) {\n            var componentView = compRef.location.nativeElement;\n            if (componentView.parent) {\n                componentView.parent.removeChild(componentView);\n            }\n            page.content = componentView;\n            parentPage.showModal(page, options.context, closeCallback, options.fullscreen);\n        });\n    };\n    return ModalDialogService;\n}());\nModalDialogService = ModalDialogService_1 = __decorate([\n    core_1.Injectable()\n], ModalDialogService);\nexports.ModalDialogService = ModalDialogService;\nvar ModalDialogHost = (function () {\n    function ModalDialogHost() {\n        throw new Error(\"ModalDialogHost is deprecated. Call ModalDialogService.showModal() \" +\n            \"by passing ViewContainerRef in the options instead.\");\n    }\n    return ModalDialogHost;\n}());\nModalDialogHost = __decorate([\n    core_1.Directive({\n        selector: \"[modal-dialog-host]\" // tslint:disable-line:directive-selector\n    }),\n    __metadata(\"design:paramtypes\", [])\n], ModalDialogHost);\nexports.ModalDialogHost = ModalDialogHost;\nvar ModalDialogService_1;\n//# sourceMappingURL=dialogs.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/nativescript.module.js":"/// <reference path=\"./iterable.d.ts\" />\nrequire(\"globals\");\nrequire(\"./zone-js/dist/zone-nativescript\");\nrequire(\"reflect-metadata\");\nrequire(\"./polyfills/array\");\nrequire(\"./polyfills/console\");\nvar common_1 = require(\"@angular/common\");\nvar renderer_1 = require(\"./renderer\");\nvar detached_loader_1 = require(\"./common/detached-loader\");\nvar dialogs_1 = require(\"./directives/dialogs\");\nvar core_1 = require(\"@angular/core\");\nvar platform_providers_1 = require(\"./platform-providers\");\nvar directives_1 = require(\"./directives\");\nfunction errorHandlerFactory() {\n    return new core_1.ErrorHandler(true);\n}\nexports.errorHandlerFactory = errorHandlerFactory;\n;\nvar NativeScriptModule = (function () {\n    function NativeScriptModule() {\n    }\n    return NativeScriptModule;\n}());\nNativeScriptModule = __decorate([\n    core_1.NgModule({\n        declarations: [\n            detached_loader_1.DetachedLoader,\n            dialogs_1.ModalDialogHost\n        ].concat(directives_1.NS_DIRECTIVES),\n        providers: [\n            { provide: core_1.ErrorHandler, useFactory: errorHandlerFactory },\n            platform_providers_1.defaultFrameProvider,\n            platform_providers_1.defaultPageProvider,\n            platform_providers_1.defaultDeviceProvider,\n            renderer_1.NativeScriptRendererFactory,\n            { provide: core_1.RendererFactory2, useClass: renderer_1.NativeScriptRendererFactory },\n            dialogs_1.ModalDialogService\n        ],\n        entryComponents: [\n            detached_loader_1.DetachedLoader,\n        ],\n        imports: [\n            common_1.CommonModule,\n            core_1.ApplicationModule,\n        ],\n        exports: [\n            common_1.CommonModule,\n            core_1.ApplicationModule,\n            detached_loader_1.DetachedLoader,\n            dialogs_1.ModalDialogHost\n        ].concat(directives_1.NS_DIRECTIVES),\n        schemas: [core_1.NO_ERRORS_SCHEMA]\n    })\n], NativeScriptModule);\nexports.NativeScriptModule = NativeScriptModule;\n//# sourceMappingURL=nativescript.module.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/platform-common.js":"// Initial imports and polyfills\nrequire(\"globals\");\nrequire(\"./zone-js/dist/zone-nativescript\");\nrequire(\"reflect-metadata\");\nrequire(\"./polyfills/array\");\nrequire(\"./polyfills/console\");\nvar core_1 = require(\"@angular/core\");\n// Work around a TS bug requiring an import of OpaqueToken without using it\nif (global.___TS_UNUSED) {\n    (function () {\n        return core_1.OpaqueToken;\n    })();\n}\nvar trace_1 = require(\"./trace\");\nvar platform_providers_1 = require(\"./platform-providers\");\nvar application_1 = require(\"application\");\nvar frame_1 = require(\"ui/frame\");\nvar page_1 = require(\"ui/page\");\nvar text_view_1 = require(\"ui/text-view\");\nrequire(\"nativescript-intl\");\nexports.onBeforeLivesync = new core_1.EventEmitter();\nexports.onAfterLivesync = new core_1.EventEmitter();\nvar lastBootstrappedModule;\nvar NativeScriptSanitizer = (function (_super) {\n    __extends(NativeScriptSanitizer, _super);\n    function NativeScriptSanitizer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NativeScriptSanitizer.prototype.sanitize = function (_context, value) {\n        return value;\n    };\n    return NativeScriptSanitizer;\n}(core_1.Sanitizer));\nexports.NativeScriptSanitizer = NativeScriptSanitizer;\nexports.COMMON_PROVIDERS = [\n    platform_providers_1.defaultPageFactoryProvider,\n    { provide: core_1.Sanitizer, useClass: NativeScriptSanitizer },\n];\nvar NativeScriptPlatformRef = (function (_super) {\n    __extends(NativeScriptPlatformRef, _super);\n    function NativeScriptPlatformRef(platform, appOptions) {\n        var _this = _super.call(this) || this;\n        _this.platform = platform;\n        _this.appOptions = appOptions;\n        return _this;\n    }\n    NativeScriptPlatformRef.prototype.bootstrapModuleFactory = function (moduleFactory) {\n        var _this = this;\n        this._bootstrapper = function () { return _this.platform.bootstrapModuleFactory(moduleFactory); };\n        this.bootstrapApp();\n        return null; // Make the compiler happy\n    };\n    NativeScriptPlatformRef.prototype.bootstrapModule = function (moduleType, compilerOptions) {\n        var _this = this;\n        if (compilerOptions === void 0) { compilerOptions = []; }\n        this._bootstrapper = function () { return _this.platform.bootstrapModule(moduleType, compilerOptions); };\n        this.bootstrapApp();\n        return null; // Make the compiler happy\n    };\n    NativeScriptPlatformRef.prototype.bootstrapApp = function () {\n        var _this = this;\n        global.__onLiveSyncCore = function () { return _this.livesyncModule(); };\n        var mainPageEntry = this.createNavigationEntry(this._bootstrapper);\n        if (this.appOptions && typeof this.appOptions.cssFile === \"string\") {\n            // TODO: All exported fields in ES6 modules should be read-only\n            // Change the case when tns-core-modules become ES6 compatible and there is a legal way to set cssFile\n            application_1.setCssFileName(this.appOptions.cssFile);\n        }\n        application_1.start(mainPageEntry);\n    };\n    NativeScriptPlatformRef.prototype.livesyncModule = function () {\n        trace_1.rendererLog(\"ANGULAR LiveSync Started\");\n        exports.onBeforeLivesync.next(lastBootstrappedModule ? lastBootstrappedModule.get() : null);\n        var mainPageEntry = this.createNavigationEntry(this._bootstrapper, function (compRef) { return exports.onAfterLivesync.next(compRef); }, function (error) { return exports.onAfterLivesync.error(error); }, true);\n        mainPageEntry.animated = false;\n        mainPageEntry.clearHistory = true;\n        var frame = frame_1.topmost();\n        if (frame) {\n            if (frame.currentPage && frame.currentPage.modal) {\n                frame.currentPage.modal.closeModal();\n            }\n            frame.navigate(mainPageEntry);\n        }\n    };\n    NativeScriptPlatformRef.prototype.onDestroy = function (callback) {\n        this.platform.onDestroy(callback);\n    };\n    Object.defineProperty(NativeScriptPlatformRef.prototype, \"injector\", {\n        get: function () {\n            return this.platform.injector;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ;\n    NativeScriptPlatformRef.prototype.destroy = function () {\n        this.platform.destroy();\n    };\n    Object.defineProperty(NativeScriptPlatformRef.prototype, \"destroyed\", {\n        get: function () {\n            return this.platform.destroyed;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NativeScriptPlatformRef.prototype.createNavigationEntry = function (bootstrapAction, resolve, reject, isLivesync, isReboot) {\n        var _this = this;\n        if (isLivesync === void 0) { isLivesync = false; }\n        if (isReboot === void 0) { isReboot = false; }\n        var pageFactory = this.platform.injector.get(platform_providers_1.PAGE_FACTORY);\n        var navEntry = {\n            create: function () {\n                var page = pageFactory({ isBootstrap: true, isLivesync: isLivesync });\n                platform_providers_1.setRootPage(page);\n                if (_this.appOptions) {\n                    page.actionBarHidden = _this.appOptions.startPageActionBarHidden;\n                }\n                var initHandler = function () {\n                    page.off(page_1.Page.navigatingToEvent, initHandler);\n                    // profiling.stop(\"application-start\");\n                    trace_1.rendererLog(\"Page loaded\");\n                    // profiling.start(\"ng-bootstrap\");\n                    trace_1.rendererLog(\"BOOTSTRAPPING...\");\n                    bootstrapAction().then(function (moduleRef) {\n                        // profiling.stop(\"ng-bootstrap\");\n                        trace_1.rendererLog(\"ANGULAR BOOTSTRAP DONE.\");\n                        lastBootstrappedModule = new WeakRef(moduleRef);\n                        if (resolve) {\n                            resolve(moduleRef);\n                        }\n                        return moduleRef;\n                    }, function (err) {\n                        trace_1.rendererError(\"ERROR BOOTSTRAPPING ANGULAR\");\n                        var errorMessage = err.message + \"\\n\\n\" + err.stack;\n                        trace_1.rendererError(errorMessage);\n                        var view = new text_view_1.TextView();\n                        view.text = errorMessage;\n                        page.content = view;\n                        if (reject) {\n                            reject(err);\n                        }\n                    });\n                };\n                page.on(page_1.Page.navigatingToEvent, initHandler);\n                return page;\n            }\n        };\n        if (isReboot) {\n            navEntry.animated = false;\n            navEntry.clearHistory = true;\n        }\n        return navEntry;\n    };\n    NativeScriptPlatformRef.prototype.liveSyncApp = function () {\n    };\n    return NativeScriptPlatformRef;\n}(core_1.PlatformRef));\nexports.NativeScriptPlatformRef = NativeScriptPlatformRef;\n//# sourceMappingURL=platform-common.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/platform.js":"// Always import platform-common first - because polyfills \nvar platform_common_1 = require(\"./platform-common\");\nvar compiler_1 = require(\"@angular/compiler\");\nvar core_1 = require(\"@angular/core\");\n// Work around a TS bug requiring an imports of\n// InjectionToken, ViewEncapsulation and MissingTranslationStrategy\n// without using them\nif (global.___TS_UNUSED) {\n    (function () { return core_1.InjectionToken; })();\n    (function () { return core_1.ViewEncapsulation; })();\n    (function () { return core_1.MissingTranslationStrategy; })();\n}\n// Register DOM adapter, if possible. Dynamic platform only!\nrequire(\"./dom-adapter\");\nvar schema_registry_1 = require(\"./schema-registry\");\nvar resource_loader_1 = require(\"./resource-loader\");\nexports.NS_COMPILER_PROVIDERS = [\n    compiler_1.COMPILER_PROVIDERS,\n    {\n        provide: core_1.COMPILER_OPTIONS,\n        useValue: {\n            providers: [\n                { provide: compiler_1.ResourceLoader, useClass: resource_loader_1.FileSystemResourceLoader },\n                { provide: compiler_1.ElementSchemaRegistry, useClass: schema_registry_1.NativeScriptElementSchemaRegistry },\n            ]\n        },\n        multi: true\n    },\n];\n// Dynamic platform \nvar _platformNativeScriptDynamic = core_1.createPlatformFactory(compiler_1.platformCoreDynamic, \"nativeScriptDynamic\", platform_common_1.COMMON_PROVIDERS.concat(exports.NS_COMPILER_PROVIDERS));\nfunction platformNativeScriptDynamic(options, extraProviders) {\n    // Return raw platform to advanced users only if explicitly requested\n    if (options && options.bootInExistingPage === true) {\n        return _platformNativeScriptDynamic(extraProviders);\n    }\n    else {\n        return new platform_common_1.NativeScriptPlatformRef(_platformNativeScriptDynamic(extraProviders), options);\n    }\n}\nexports.platformNativeScriptDynamic = platformNativeScriptDynamic;\n//# sourceMappingURL=platform.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/platform-providers.js":"var frame_1 = require(\"ui/frame\");\nvar page_1 = require(\"ui/page\");\nvar core_1 = require(\"@angular/core\");\nvar platform_1 = require(\"platform\");\nvar platform = require(\"platform\");\nexports.APP_ROOT_VIEW = new core_1.OpaqueToken(\"App Root View\");\nexports.DEVICE = new core_1.OpaqueToken(\"platfrom device\");\nexports.PAGE_FACTORY = new core_1.OpaqueToken(\"page factory\");\n// Work around a TS bug requiring an import of platform.Device without using it\nif (global.___TS_UNUSED) {\n    (function () {\n        return platform;\n    })();\n}\nvar _rootPageRef;\nfunction setRootPage(page) {\n    _rootPageRef = new WeakRef(page);\n}\nexports.setRootPage = setRootPage;\nfunction getRootPage() {\n    return _rootPageRef && _rootPageRef.get();\n}\nexports.getRootPage = getRootPage;\n// Use an exported function to make the AoT compiler happy.\nfunction getDefaultPage() {\n    var frame = frame_1.topmost();\n    return getRootPage() || (frame && frame.currentPage);\n}\nexports.getDefaultPage = getDefaultPage;\nexports.defaultPageProvider = { provide: page_1.Page, useFactory: getDefaultPage };\n// Use an exported function to make the AoT compiler happy.\nfunction getDefaultFrame() {\n    return frame_1.topmost();\n}\nexports.getDefaultFrame = getDefaultFrame;\nexports.defaultFrameProvider = { provide: frame_1.Frame, useFactory: getDefaultFrame };\n// Use an exported function to make the AoT compiler happy.\nfunction getDefaultDevice() {\n    return platform_1.device;\n}\nexports.getDefaultDevice = getDefaultDevice;\nexports.defaultDeviceProvider = { provide: exports.DEVICE, useFactory: getDefaultDevice };\nexports.defaultPageFactory = function (_opts) {\n    return new page_1.Page();\n};\nexports.defaultPageFactoryProvider = { provide: exports.PAGE_FACTORY, useValue: exports.defaultPageFactory };\n//# sourceMappingURL=platform-providers.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/platform-static.js":"// Always import platform-common first - because polyfills \nvar platform_common_1 = require(\"./platform-common\");\nvar core_1 = require(\"@angular/core\");\n// \"Static\" platform\nvar _platformNativeScript = core_1.createPlatformFactory(core_1.platformCore, \"nativeScript\", platform_common_1.COMMON_PROVIDERS.slice());\nfunction platformNativeScript(options, extraProviders) {\n    // Return raw platform to advanced users only if explicitly requested\n    if (options && options.bootInExistingPage === true) {\n        return _platformNativeScript(extraProviders);\n    }\n    else {\n        return new platform_common_1.NativeScriptPlatformRef(_platformNativeScript(extraProviders), options);\n    }\n}\nexports.platformNativeScript = platformNativeScript;\n//# sourceMappingURL=platform-static.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/postinstall.js":"var fs = require(\"fs\");\nvar os = require(\"os\");\nvar hookHelper = require(\"./hooks/hook-helper\");\nvar projectDir = hookHelper.findProjectDir();\n\nif (projectDir) {\n    var hooksDir = hookHelper.getHooksDir(),\n        beforeLivesyncHookDir = hookHelper.getBeforeLivesyncHookDir(),\n        content = 'module.exports = require(\"nativescript-angular/hooks/before-livesync\");';\n    if (!fs.existsSync(hooksDir)) {\n        fs.mkdirSync(hooksDir);\n    }\n    if (!fs.existsSync(beforeLivesyncHookDir)) {\n        fs.mkdirSync(beforeLivesyncHookDir);\n    }\n    fs.writeFileSync(hookHelper.getHookFilePath(), content + os.EOL);\n}\n","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/hooks/hook-helper.js":"\"use strict\";\nvar fs = require(\"fs\");\nvar path = require(\"path\");\n\nexports.findProjectDir = function findProjectDir() {\n    var candidateDir = path.join(__dirname, \"..\");\n    while (true) {\n        var oldCandidateDir = candidateDir;\n        candidateDir = path.dirname(candidateDir);\n        if (path.basename(candidateDir) === 'node_modules') {\n            continue;\n        }\n        var packageJsonFile = path.join(candidateDir, 'package.json');\n        if (fs.existsSync(packageJsonFile)) {\n            return candidateDir;\n        }\n        if (oldCandidateDir === candidateDir) {\n            return;\n        }\n    }\n};\n\nexports.getHooksDir = function getHooksDir() {\n    return path.join(exports.findProjectDir(), 'hooks');\n};\n\nexports.getBeforeLivesyncHookDir = function getBeforeLivesyncHookDir() {\n    return path.join(exports.getHooksDir(), \"before-livesync\");\n};\n\nexports.getHookFilePath = function getHookFilePath() {\n    return path.join(exports.getBeforeLivesyncHookDir(), \"nativescript-angular-sync.js\");\n};\n","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/renderer.js":"var core_1 = require(\"@angular/core\");\nvar view_1 = require(\"ui/core/view\");\nvar application_1 = require(\"application\");\nvar frame_1 = require(\"ui/frame\");\nvar lang_facade_1 = require(\"./lang-facade\");\nvar view_util_1 = require(\"./view-util\");\nvar platform_providers_1 = require(\"./platform-providers\");\nvar trace_1 = require(\"./trace\");\n// CONTENT_ATTR not exported from NativeScript_renderer - we need it for styles application.\nvar COMPONENT_REGEX = /%COMP%/g;\nexports.COMPONENT_VARIABLE = \"%COMP%\";\nexports.HOST_ATTR = \"_nghost-\" + exports.COMPONENT_VARIABLE;\nexports.CONTENT_ATTR = \"_ngcontent-\" + exports.COMPONENT_VARIABLE;\nvar ATTR_SANITIZER = /-/g;\nvar NativeScriptRendererFactory = (function () {\n    function NativeScriptRendererFactory(rootView, device, zone) {\n        this.zone = zone;\n        this.componentRenderers = new Map();\n        this.viewUtil = new view_util_1.ViewUtil(device);\n        this.setRootNgView(rootView);\n        this.defaultRenderer = new NativeScriptRenderer(this.rootNgView, zone, this.viewUtil);\n    }\n    NativeScriptRendererFactory.prototype.setRootNgView = function (rootView) {\n        if (!rootView) {\n            rootView = platform_providers_1.getRootPage() || frame_1.topmost().currentPage;\n        }\n        rootView.nodeName = \"NONE\";\n        this.rootNgView = rootView;\n    };\n    NativeScriptRendererFactory.prototype.createRenderer = function (element, type) {\n        if (!element || !type) {\n            return this.defaultRenderer;\n        }\n        var renderer = this.componentRenderers.get(type.id);\n        if (!lang_facade_1.isBlank(renderer)) {\n            return renderer;\n        }\n        if (type.encapsulation === core_1.ViewEncapsulation.Emulated) {\n            renderer = new EmulatedRenderer(type, this.rootNgView, this.zone, this.viewUtil);\n            renderer.applyToHost(element);\n        }\n        else {\n            renderer = this.defaultRenderer;\n        }\n        this.componentRenderers.set(type.id, renderer);\n        return renderer;\n    };\n    return NativeScriptRendererFactory;\n}());\nNativeScriptRendererFactory = __decorate([\n    core_1.Injectable(),\n    __param(0, core_1.Optional()), __param(0, core_1.Inject(platform_providers_1.APP_ROOT_VIEW)),\n    __param(1, core_1.Inject(platform_providers_1.DEVICE)),\n    __metadata(\"design:paramtypes\", [view_1.View, Object, core_1.NgZone])\n], NativeScriptRendererFactory);\nexports.NativeScriptRendererFactory = NativeScriptRendererFactory;\nvar NativeScriptRenderer = (function (_super) {\n    __extends(NativeScriptRenderer, _super);\n    function NativeScriptRenderer(rootView, zone, viewUtil) {\n        var _this = _super.call(this) || this;\n        _this.rootView = rootView;\n        _this.zone = zone;\n        _this.viewUtil = viewUtil;\n        _this.data = Object.create(null);\n        trace_1.rendererLog(\"NativeScriptRenderer created\");\n        return _this;\n    }\n    NativeScriptRenderer.prototype.appendChild = function (parent, newChild) {\n        trace_1.rendererLog(\"NativeScriptRenderer.appendChild child: \" + newChild + \" parent: \" + parent);\n        if (parent) {\n            this.viewUtil.insertChild(parent, newChild);\n        }\n    };\n    NativeScriptRenderer.prototype.insertBefore = function (parent, newChild, refChildIndex) {\n        trace_1.rendererLog(\"NativeScriptRenderer.insertBefore child: \" + newChild + \" parent: \" + parent);\n        if (parent) {\n            this.viewUtil.insertChild(parent, newChild, refChildIndex);\n        }\n    };\n    NativeScriptRenderer.prototype.removeChild = function (parent, oldChild) {\n        trace_1.rendererLog(\"NativeScriptRenderer.removeChild child: \" + oldChild + \" parent: \" + parent);\n        if (parent) {\n            this.viewUtil.removeChild(parent, oldChild);\n        }\n    };\n    NativeScriptRenderer.prototype.selectRootElement = function (selector) {\n        trace_1.rendererLog(\"selectRootElement: \" + selector);\n        return this.rootView;\n    };\n    NativeScriptRenderer.prototype.parentNode = function (node) {\n        return node.parent;\n    };\n    NativeScriptRenderer.prototype.nextSibling = function (node) {\n        trace_1.rendererLog(\"NativeScriptRenderer.nextSibling \" + node);\n        return this.viewUtil.nextSiblingIndex(node);\n    };\n    NativeScriptRenderer.prototype.createComment = function (_value) {\n        trace_1.rendererLog(\"NativeScriptRenderer.createComment \" + _value);\n        return this.viewUtil.createComment();\n    };\n    NativeScriptRenderer.prototype.createElement = function (name, _namespace) {\n        trace_1.rendererLog(\"NativeScriptRenderer.createElement: \" + name);\n        return this.viewUtil.createView(name);\n    };\n    NativeScriptRenderer.prototype.createText = function (_value) {\n        trace_1.rendererLog(\"NativeScriptRenderer.createText \" + _value);\n        return this.viewUtil.createText();\n    };\n    NativeScriptRenderer.prototype.createViewRoot = function (hostElement) {\n        trace_1.rendererLog(\"NativeScriptRenderer.createViewRoot \" + hostElement.nodeName);\n        return hostElement;\n    };\n    NativeScriptRenderer.prototype.projectNodes = function (parentElement, nodes) {\n        var _this = this;\n        trace_1.rendererLog(\"NativeScriptRenderer.projectNodes\");\n        nodes.forEach(function (node) { return _this.viewUtil.insertChild(parentElement, node); });\n    };\n    NativeScriptRenderer.prototype.destroy = function () {\n        trace_1.rendererLog(\"NativeScriptRenderer.destroy\");\n        // Seems to be called on component dispose only (router outlet)\n        // TODO: handle this when we resolve routing and navigation.\n    };\n    NativeScriptRenderer.prototype.setAttribute = function (view, name, value, namespace) {\n        trace_1.rendererLog(\"NativeScriptRenderer.setAttribute \" + view + \" : \" + name + \" = \" + value + \", namespace: \" + namespace);\n        return this.viewUtil.setProperty(view, name, value, namespace);\n    };\n    NativeScriptRenderer.prototype.removeAttribute = function (_el, _name) {\n        trace_1.rendererLog(\"NativeScriptRenderer.removeAttribute \" + _el + \": \" + _name);\n    };\n    NativeScriptRenderer.prototype.setProperty = function (view, name, value) {\n        trace_1.rendererLog(\"NativeScriptRenderer.setProperty \" + view + \" : \" + name + \" = \" + value);\n        return this.viewUtil.setProperty(view, name, value);\n    };\n    NativeScriptRenderer.prototype.addClass = function (view, name) {\n        trace_1.rendererLog(\"NativeScriptRenderer.addClass \" + name);\n        this.viewUtil.addClass(view, name);\n    };\n    NativeScriptRenderer.prototype.removeClass = function (view, name) {\n        trace_1.rendererLog(\"NativeScriptRenderer.removeClass \" + name);\n        this.viewUtil.removeClass(view, name);\n    };\n    NativeScriptRenderer.prototype.setStyle = function (view, styleName, value, _flags) {\n        trace_1.rendererLog(\"NativeScriptRenderer.setStyle: \" + styleName + \" = \" + value);\n        this.viewUtil.setStyle(view, styleName, value);\n    };\n    NativeScriptRenderer.prototype.removeStyle = function (view, styleName, _flags) {\n        trace_1.rendererLog(\"NativeScriptRenderer.removeStyle: ${styleName}\");\n        this.viewUtil.removeStyle(view, styleName);\n    };\n    // Used only in debug mode to serialize property changes to comment nodes,\n    // such as <template> placeholders.\n    NativeScriptRenderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) {\n        trace_1.rendererLog(\"NativeScriptRenderer.setBindingDebugInfo: \" + renderElement + \", \" +\n            propertyName + \" = \" + propertyValue);\n    };\n    NativeScriptRenderer.prototype.setElementDebugInfo = function (renderElement, _info /*RenderDebugInfo*/) {\n        trace_1.rendererLog(\"NativeScriptRenderer.setElementDebugInfo: \" + renderElement);\n    };\n    NativeScriptRenderer.prototype.invokeElementMethod = function (_renderElement, methodName, args) {\n        trace_1.rendererLog(\"NativeScriptRenderer.invokeElementMethod \" + methodName + \" \" + args);\n    };\n    NativeScriptRenderer.prototype.setValue = function (_renderNode, _value) {\n        trace_1.rendererLog(\"NativeScriptRenderer.setValue\");\n    };\n    NativeScriptRenderer.prototype.listen = function (renderElement, eventName, callback) {\n        var _this = this;\n        trace_1.rendererLog(\"NativeScriptRenderer.listen: \" + eventName);\n        // Explicitly wrap in zone\n        var zonedCallback = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            _this.zone.run(function () {\n                callback.apply(undefined, args);\n            });\n        };\n        renderElement.on(eventName, zonedCallback);\n        if (eventName === view_1.View.loadedEvent && renderElement.isLoaded) {\n            var notifyData = { eventName: view_1.View.loadedEvent, object: renderElement };\n            zonedCallback(notifyData);\n        }\n        return function () { return renderElement.off(eventName, zonedCallback); };\n    };\n    return NativeScriptRenderer;\n}(core_1.Renderer2));\nexports.NativeScriptRenderer = NativeScriptRenderer;\nvar EmulatedRenderer = (function (_super) {\n    __extends(EmulatedRenderer, _super);\n    function EmulatedRenderer(component, rootView, zone, viewUtil) {\n        var _this = _super.call(this, rootView, zone, viewUtil) || this;\n        var componentId = component.id.replace(ATTR_SANITIZER, \"_\");\n        _this.contentAttr = replaceNgAttribute(exports.CONTENT_ATTR, componentId);\n        _this.hostAttr = replaceNgAttribute(exports.HOST_ATTR, componentId);\n        _this.addStyles(component.styles, componentId);\n        return _this;\n    }\n    EmulatedRenderer.prototype.applyToHost = function (view) {\n        _super.prototype.setAttribute.call(this, view, this.hostAttr, \"\");\n    };\n    EmulatedRenderer.prototype.appendChild = function (parent, newChild) {\n        _super.prototype.appendChild.call(this, parent, newChild);\n    };\n    EmulatedRenderer.prototype.createElement = function (parent, name) {\n        var view = _super.prototype.createElement.call(this, parent, name);\n        // Set an attribute to the view to scope component-specific css.\n        // The property name is pre-generated by Angular.\n        _super.prototype.setAttribute.call(this, view, this.contentAttr, \"\");\n        return view;\n    };\n    EmulatedRenderer.prototype.addStyles = function (styles, componentId) {\n        styles.map(function (s) { return s.toString(); })\n            .map(function (s) { return replaceNgAttribute(s, componentId); })\n            .forEach(application_1.addCss);\n    };\n    return EmulatedRenderer;\n}(NativeScriptRenderer));\nfunction replaceNgAttribute(input, componentId) {\n    return input.replace(COMPONENT_REGEX, componentId);\n}\n//# sourceMappingURL=renderer.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/resource-loader.js":"var file_system_1 = require(\"file-system\");\nvar compiler_1 = require(\"@angular/compiler\");\nvar FileSystemResourceLoader = (function (_super) {\n    __extends(FileSystemResourceLoader, _super);\n    function FileSystemResourceLoader() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    FileSystemResourceLoader.prototype.resolve = function (url, baseUrl) {\n        // Angular assembles absolute URL's and prefixes them with //\n        if (url.indexOf(\"/\") !== 0) {\n            // Resolve relative URL's based on the app root.\n            return file_system_1.path.join(baseUrl, url);\n        }\n        else {\n            return url;\n        }\n    };\n    FileSystemResourceLoader.prototype.get = function (url) {\n        var appDir = file_system_1.knownFolders.currentApp().path;\n        var templatePath = this.resolve(url, appDir);\n        if (!file_system_1.File.exists(templatePath)) {\n            throw new Error(\"File \" + templatePath + \" does not exist. Resolved from: \" + url + \".\");\n        }\n        var templateFile = file_system_1.File.fromPath(templatePath);\n        return templateFile.readText();\n    };\n    return FileSystemResourceLoader;\n}(compiler_1.ResourceLoader));\nexports.FileSystemResourceLoader = FileSystemResourceLoader;\n//# sourceMappingURL=resource-loader.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/router.js":"var core_1 = require(\"@angular/core\");\nvar router_1 = require(\"@angular/router\");\nvar common_1 = require(\"@angular/common\");\nvar frame_1 = require(\"ui/frame\");\nvar ns_router_link_1 = require(\"./router/ns-router-link\");\nvar ns_router_link_active_1 = require(\"./router/ns-router-link-active\");\nvar page_router_outlet_1 = require(\"./router/page-router-outlet\");\nvar ns_location_strategy_1 = require(\"./router/ns-location-strategy\");\nvar ns_platform_location_1 = require(\"./router/ns-platform-location\");\nvar router_extensions_1 = require(\"./router/router-extensions\");\nvar nativescript_module_1 = require(\"./nativescript.module\");\nvar page_router_outlet_2 = require(\"./router/page-router-outlet\");\nexports.PageRoute = page_router_outlet_2.PageRoute;\nvar router_extensions_2 = require(\"./router/router-extensions\");\nexports.RouterExtensions = router_extensions_2.RouterExtensions;\nvar ns_module_factory_loader_1 = require(\"./router/ns-module-factory-loader\");\nexports.NSModuleFactoryLoader = ns_module_factory_loader_1.NSModuleFactoryLoader;\nvar NativeScriptRouterModule = (function () {\n    function NativeScriptRouterModule() {\n    }\n    NativeScriptRouterModule.forRoot = function (routes, config) {\n        return router_1.RouterModule.forRoot(routes, config);\n    };\n    NativeScriptRouterModule.forChild = function (routes) {\n        return router_1.RouterModule.forChild(routes);\n    };\n    return NativeScriptRouterModule;\n}());\nNativeScriptRouterModule = __decorate([\n    core_1.NgModule({\n        declarations: [\n            ns_router_link_1.NSRouterLink,\n            ns_router_link_active_1.NSRouterLinkActive,\n            page_router_outlet_1.PageRouterOutlet\n        ],\n        providers: [\n            {\n                provide: ns_location_strategy_1.NSLocationStrategy,\n                useFactory: provideLocationStrategy,\n                deps: [[ns_location_strategy_1.NSLocationStrategy, new core_1.Optional(), new core_1.SkipSelf()], frame_1.Frame]\n            },\n            { provide: common_1.LocationStrategy, useExisting: ns_location_strategy_1.NSLocationStrategy },\n            ns_platform_location_1.NativescriptPlatformLocation,\n            { provide: common_1.PlatformLocation, useClass: ns_platform_location_1.NativescriptPlatformLocation },\n            router_extensions_1.RouterExtensions,\n            core_1.SystemJsNgModuleLoader,\n        ],\n        imports: [\n            router_1.RouterModule,\n            nativescript_module_1.NativeScriptModule\n        ],\n        exports: [\n            router_1.RouterModule,\n            ns_router_link_1.NSRouterLink,\n            ns_router_link_active_1.NSRouterLinkActive,\n            page_router_outlet_1.PageRouterOutlet\n        ],\n        schemas: [core_1.NO_ERRORS_SCHEMA]\n    })\n], NativeScriptRouterModule);\nexports.NativeScriptRouterModule = NativeScriptRouterModule;\nfunction provideLocationStrategy(locationStrategy, frame) {\n    return locationStrategy ? locationStrategy : new ns_location_strategy_1.NSLocationStrategy(frame);\n}\nexports.provideLocationStrategy = provideLocationStrategy;\n//# sourceMappingURL=router.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/router-url-tree.js":"/* tslint:disable:forin */\n// Copied unexported functions from @angular/router/src/url_tree\nvar router_1 = require(\"@angular/router\");\nfunction containsTree(container, containee, exact) {\n    if (exact) {\n        return equalSegmentGroups(container.root, containee.root);\n    }\n    else {\n        return containsSegmentGroup(container.root, containee.root);\n    }\n}\nexports.containsTree = containsTree;\nfunction equalSegmentGroups(container, containee) {\n    if (!equalPath(container.segments, containee.segments)) {\n        return false;\n    }\n    if (container.numberOfChildren !== containee.numberOfChildren) {\n        return false;\n    }\n    for (var c in containee.children) {\n        if (!container.children[c]) {\n            return false;\n        }\n        if (!equalSegmentGroups(container.children[c], containee.children[c])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction containsSegmentGroup(container, containee) {\n    return containsSegmentGroupHelper(container, containee, containee.segments);\n}\nfunction containsSegmentGroupHelper(container, containee, containeePaths) {\n    if (container.segments.length > containeePaths.length) {\n        var current = container.segments.slice(0, containeePaths.length);\n        if (!equalPath(current, containeePaths)) {\n            return false;\n        }\n        if (containee.hasChildren()) {\n            return false;\n        }\n        return true;\n    }\n    else if (container.segments.length === containeePaths.length) {\n        if (!equalPath(container.segments, containeePaths)) {\n            return false;\n        }\n        for (var c in containee.children) {\n            if (!container.children[c]) {\n                return false;\n            }\n            if (!containsSegmentGroup(container.children[c], containee.children[c])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    else {\n        var current = containeePaths.slice(0, container.segments.length);\n        var next = containeePaths.slice(container.segments.length);\n        if (!equalPath(container.segments, current)) {\n            return false;\n        }\n        if (!container.children[router_1.PRIMARY_OUTLET]) {\n            return false;\n        }\n        return containsSegmentGroupHelper(container.children[router_1.PRIMARY_OUTLET], containee, next);\n    }\n}\nfunction equalPath(a, b) {\n    if (a.length !== b.length) {\n        return false;\n    }\n    for (var i = 0; i < a.length; ++i) {\n        if (a[i].path !== b[i].path) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.equalPath = equalPath;\n//# sourceMappingURL=router-url-tree.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/schema-registry.js":"var compiler_1 = require(\"@angular/compiler\");\nvar SecurityContext;\n(function (SecurityContext) {\n    SecurityContext[SecurityContext[\"NONE\"] = 0] = \"NONE\";\n    SecurityContext[SecurityContext[\"HTML\"] = 1] = \"HTML\";\n    SecurityContext[SecurityContext[\"STYLE\"] = 2] = \"STYLE\";\n    SecurityContext[SecurityContext[\"SCRIPT\"] = 3] = \"SCRIPT\";\n    SecurityContext[SecurityContext[\"URL\"] = 4] = \"URL\";\n    SecurityContext[SecurityContext[\"RESOURCE_URL\"] = 5] = \"RESOURCE_URL\";\n})(SecurityContext = exports.SecurityContext || (exports.SecurityContext = {}));\nvar NativeScriptElementSchemaRegistry = (function (_super) {\n    __extends(NativeScriptElementSchemaRegistry, _super);\n    function NativeScriptElementSchemaRegistry() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NativeScriptElementSchemaRegistry.prototype.hasProperty = function (_tagName, _propName) {\n        return true;\n    };\n    NativeScriptElementSchemaRegistry.prototype.hasElement = function (_tagName, _schemaMetas) {\n        return true;\n    };\n    NativeScriptElementSchemaRegistry.prototype.getMappedPropName = function (propName) {\n        return propName;\n    };\n    NativeScriptElementSchemaRegistry.prototype.getDefaultComponentElementName = function () {\n        return \"ng-component\";\n    };\n    NativeScriptElementSchemaRegistry.prototype.securityContext = function (_tagName, _propName) {\n        return SecurityContext.NONE;\n    };\n    NativeScriptElementSchemaRegistry.prototype.validateProperty = function (_name) {\n        return { error: false };\n    };\n    NativeScriptElementSchemaRegistry.prototype.validateAttribute = function (_name) {\n        return { error: false };\n    };\n    NativeScriptElementSchemaRegistry.prototype.allKnownElementNames = function () {\n        return [];\n    };\n    NativeScriptElementSchemaRegistry.prototype.normalizeAnimationStyleProperty = function (propName) {\n        return propName;\n    };\n    NativeScriptElementSchemaRegistry.prototype.normalizeAnimationStyleValue = function (_camelCaseProp, _userProvidedProp, val) {\n        return { error: null, value: val.toString() };\n    };\n    return NativeScriptElementSchemaRegistry;\n}(compiler_1.ElementSchemaRegistry));\nexports.NativeScriptElementSchemaRegistry = NativeScriptElementSchemaRegistry;\n//# sourceMappingURL=schema-registry.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/view-util.js":"var types_1 = require(\"utils/types\");\nvar view_1 = require(\"ui/core/view\");\nvar content_view_1 = require(\"ui/content-view\");\nvar layout_base_1 = require(\"ui/layouts/layout-base\");\nvar element_registry_1 = require(\"./element-registry\");\nvar special_properties_1 = require(\"ui/builder/special-properties\");\nvar style_property_1 = require(\"ui/styling/style-property\");\nvar dependency_observable_1 = require(\"ui/core/dependency-observable\");\nvar platform_1 = require(\"platform\");\nvar trace_1 = require(\"./trace\");\nvar XML_ATTRIBUTES = Object.freeze([\"style\", \"rows\", \"columns\", \"fontAttributes\"]);\nvar ELEMENT_NODE_TYPE = 1;\nvar whiteSpaceSplitter = /\\s+/;\nfunction isView(view) {\n    return view instanceof view_1.View;\n}\nexports.isView = isView;\nfunction isLayout(view) {\n    return view instanceof layout_base_1.LayoutBase;\n}\nexports.isLayout = isLayout;\nfunction isContentView(view) {\n    return view instanceof content_view_1.ContentView;\n}\nexports.isContentView = isContentView;\nvar propertyMaps = new Map();\nvar ViewUtil = (function () {\n    function ViewUtil(device) {\n        this.isIos = device.os === platform_1.platformNames.ios;\n        this.isAndroid = device.os === platform_1.platformNames.android;\n    }\n    ViewUtil.prototype.insertChild = function (parent, child, atIndex) {\n        if (atIndex === void 0) { atIndex = -1; }\n        if (!parent || child.meta.skipAddToDom) {\n            return;\n        }\n        if (parent.meta && parent.meta.insertChild) {\n            parent.meta.insertChild(parent, child, atIndex);\n        }\n        else if (isLayout(parent)) {\n            if (child.parent === parent) {\n                var index = parent.getChildIndex(child);\n                if (index !== -1) {\n                    parent.removeChild(child);\n                }\n            }\n            if (atIndex !== -1) {\n                parent.insertChild(child, atIndex);\n            }\n            else {\n                parent.addChild(child);\n            }\n        }\n        else if (isContentView(parent)) {\n            // Explicit handling of template anchors inside ContentView\n            if (child.nodeName === \"#comment\") {\n                parent._addView(child, atIndex);\n            }\n            else {\n                parent.content = child;\n            }\n        }\n        else if (parent && parent._addChildFromBuilder) {\n            parent._addChildFromBuilder(child.nodeName, child);\n        }\n        else {\n        }\n    };\n    ViewUtil.prototype.removeChild = function (parent, child) {\n        if (!parent || child.meta.skipAddToDom) {\n            return;\n        }\n        if (parent.meta && parent.meta.removeChild) {\n            parent.meta.removeChild(parent, child);\n        }\n        else if (isLayout(parent)) {\n            parent.removeChild(child);\n        }\n        else if (isContentView(parent)) {\n            if (parent.content === child) {\n                parent.content = null;\n            }\n            // Explicit handling of template anchors inside ContentView\n            if (child.nodeName === \"#comment\") {\n                parent._removeView(child);\n            }\n        }\n        else if (isView(parent)) {\n            parent._removeView(child);\n        }\n        else {\n        }\n    };\n    ViewUtil.prototype.getChildIndex = function (parent, child) {\n        if (isLayout(parent)) {\n            return parent.getChildIndex(child);\n        }\n        else if (isContentView(parent)) {\n            return child === parent.content ? 0 : -1;\n        }\n        else {\n        }\n    };\n    ViewUtil.prototype.createComment = function () {\n        var commentView = this.createView(\"Comment\");\n        commentView.nodeName = \"#comment\";\n        commentView.visibility = \"collapse\";\n        return commentView;\n    };\n    ViewUtil.prototype.createText = function () {\n        var detachedText = this.createView(\"DetachedText\");\n        detachedText.nodeName = \"#text\";\n        detachedText.visibility = \"collapse\";\n        return detachedText;\n    };\n    ViewUtil.prototype.createView = function (name) {\n        trace_1.rendererLog(\"Creating view: \" + name);\n        if (!element_registry_1.isKnownView(name)) {\n            name = \"ProxyViewContainer\";\n        }\n        var viewClass = element_registry_1.getViewClass(name);\n        var view = new viewClass();\n        view.nodeName = name;\n        view.meta = element_registry_1.getViewMeta(name);\n        // we're setting the node type of the view\n        // to 'element' because of checks done in the\n        // dom animation engine:\n        // tslint:disable-next-line:max-line-length\n        // https://github.com/angular/angular/blob/master/packages/animations/browser/src/render/dom_animation_engine.ts#L70-L81\n        view.nodeType = ELEMENT_NODE_TYPE;\n        return view;\n    };\n    ViewUtil.prototype.setProperty = function (view, attributeName, value, namespace) {\n        if (namespace && !this.runsIn(namespace)) {\n            return;\n        }\n        if (attributeName.indexOf(\".\") !== -1) {\n            // Handle nested properties\n            var properties = attributeName.split(\".\");\n            attributeName = properties[properties.length - 1];\n            var propMap = this.getProperties(view);\n            var i = 0;\n            while (i < properties.length - 1 && types_1.isDefined(view)) {\n                var prop = properties[i];\n                if (propMap.has(prop)) {\n                    prop = propMap.get(prop);\n                }\n                view = view[prop];\n                propMap = this.getProperties(view);\n                i++;\n            }\n        }\n        if (types_1.isDefined(view)) {\n            this.setPropertyInternal(view, attributeName, value);\n        }\n    };\n    // finds the node in the parent's views and returns the next index\n    // returns -1 if the node has no parent or next sibling\n    ViewUtil.prototype.nextSiblingIndex = function (node) {\n        var parent = node.parent;\n        if (!parent) {\n            return -1;\n        }\n        var index = 0;\n        var found = false;\n        parent._eachChildView(function (child) {\n            if (child === node) {\n                found = true;\n            }\n            index += 1;\n            return !found;\n        });\n        return found ? index : -1;\n    };\n    ViewUtil.prototype.runsIn = function (platform) {\n        return (platform === \"ios\" && this.isIos) ||\n            (platform === \"android\" && this.isAndroid);\n    };\n    ViewUtil.prototype.setPropertyInternal = function (view, attributeName, value) {\n        trace_1.rendererLog(\"Setting attribute: \" + attributeName);\n        var specialSetter = special_properties_1.getSpecialPropertySetter(attributeName);\n        var propMap = this.getProperties(view);\n        if (attributeName === \"class\") {\n            this.setClasses(view, value);\n        }\n        else if (XML_ATTRIBUTES.indexOf(attributeName) !== -1) {\n            view._applyXmlAttribute(attributeName, value);\n        }\n        else if (specialSetter) {\n            specialSetter(view, value);\n        }\n        else if (propMap.has(attributeName)) {\n            // We have a lower-upper case mapped property.\n            var propertyName = propMap.get(attributeName);\n            view[propertyName] = this.convertValue(value);\n        }\n        else {\n            // Unknown attribute value -- just set it to our object as is.\n            view[attributeName] = this.convertValue(value);\n        }\n    };\n    ViewUtil.prototype.convertValue = function (value) {\n        if (typeof (value) !== \"string\" || value === \"\") {\n            return value;\n        }\n        var valueAsNumber = +value;\n        if (!isNaN(valueAsNumber)) {\n            return valueAsNumber;\n        }\n        else if (value && (value.toLowerCase() === \"true\" || value.toLowerCase() === \"false\")) {\n            return value.toLowerCase() === \"true\" ? true : false;\n        }\n        else {\n            return value;\n        }\n    };\n    ViewUtil.prototype.getProperties = function (instance) {\n        var type = instance && instance.constructor;\n        if (!type) {\n            return new Map();\n        }\n        if (!propertyMaps.has(type)) {\n            var propMap = new Map();\n            for (var propName in instance) {\n                propMap.set(propName.toLowerCase(), propName);\n            }\n            propertyMaps.set(type, propMap);\n        }\n        return propertyMaps.get(type);\n    };\n    ViewUtil.prototype.cssClasses = function (view) {\n        if (!view.ngCssClasses) {\n            view.ngCssClasses = new Map();\n        }\n        return view.ngCssClasses;\n    };\n    ViewUtil.prototype.addClass = function (view, className) {\n        this.cssClasses(view).set(className, true);\n        this.syncClasses(view);\n    };\n    ViewUtil.prototype.removeClass = function (view, className) {\n        this.cssClasses(view).delete(className);\n        this.syncClasses(view);\n    };\n    ViewUtil.prototype.setClasses = function (view, classesValue) {\n        var _this = this;\n        var classes = classesValue.split(whiteSpaceSplitter);\n        this.cssClasses(view).clear();\n        classes.forEach(function (className) { return _this.cssClasses(view).set(className, true); });\n        this.syncClasses(view);\n    };\n    ViewUtil.prototype.syncClasses = function (view) {\n        var classValue = Array.from(this.cssClasses(view).keys()).join(\" \");\n        view.cssClass = classValue;\n    };\n    ViewUtil.prototype.setStyle = function (view, styleName, value) {\n        trace_1.rendererLog(\"Set style: \" + styleName + \" with value: \" + value + \" to view: \" + view);\n        this.setStyleProperty(view, styleName, value);\n    };\n    ViewUtil.prototype.removeStyle = function (view, styleName) {\n        trace_1.rendererLog(\"Remove style: \" + styleName + \" from view: \" + view);\n        this.setStyleProperty(view, styleName);\n    };\n    ViewUtil.prototype.setStyleProperty = function (view, styleName, styleValue) {\n        var _this = this;\n        trace_1.rendererLog(\"setStyleProperty: \" + styleName + \" = \" + styleValue);\n        var name = styleName;\n        var resolvedValue = this.resolveCssValue(styleValue);\n        style_property_1.withStyleProperty(name, resolvedValue, function (property, value) {\n            if (types_1.isString(property)) {\n                // Fall back to resolving property by name.\n                var resolvedProperty = style_property_1.getPropertyByName(name);\n                if (resolvedProperty) {\n                    _this.setStyleValue(view, resolvedProperty, resolvedValue);\n                }\n                else {\n                    trace_1.rendererLog(\"Unknown style property: \" + styleName);\n                }\n            }\n            else {\n                var resolvedProperty = property;\n                _this.setStyleValue(view, resolvedProperty, value);\n            }\n        });\n    };\n    ViewUtil.prototype.resolveCssValue = function (styleValue) {\n        return styleValue;\n    };\n    ViewUtil.prototype.setStyleValue = function (view, property, value) {\n        try {\n            if (!!value) {\n                view.style._setValue(property, value, dependency_observable_1.ValueSource.Local);\n            }\n            else {\n                view.style._resetValue(property, dependency_observable_1.ValueSource.Local);\n            }\n        }\n        catch (ex) {\n            trace_1.styleError(\"Error setting property: \" + property.name + \" view: \" + view +\n                \" value: \" + value + \" \" + ex);\n        }\n    };\n    return ViewUtil;\n}());\nexports.ViewUtil = ViewUtil;\n//# sourceMappingURL=view-util.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/animations/animation-driver.js":"var style_property_1 = require(\"ui/styling/style-property\");\nvar animation_player_1 = require(\"./animation-player\");\nvar AnimationDriver = (function () {\n    function AnimationDriver() {\n    }\n    return AnimationDriver;\n}());\nexports.AnimationDriver = AnimationDriver;\nvar NativeScriptAnimationDriver = (function () {\n    function NativeScriptAnimationDriver() {\n    }\n    NativeScriptAnimationDriver.prototype.computeStyle = function (element, prop) {\n        return element.style._getValue(style_property_1.getPropertyByCssName(prop));\n    };\n    NativeScriptAnimationDriver.prototype.animate = function (element, keyframes, duration, delay, easing) {\n        return new animation_player_1.NativeScriptAnimationPlayer(element, keyframes, duration, delay, easing);\n    };\n    return NativeScriptAnimationDriver;\n}());\nexports.NativeScriptAnimationDriver = NativeScriptAnimationDriver;\n//# sourceMappingURL=animation-driver.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/animations/animation-engine.js":"var browser_1 = require(\"@angular/animations/browser\");\nvar dom_utils_1 = require(\"./dom-utils\");\nvar MARKED_FOR_ANIMATION_CLASSNAME = \"ng-animating\";\nvar MARKED_FOR_ANIMATION_SELECTOR = \".ng-animating\";\n// we are extending Angular's animation engine and\n// overriding a few methods that work on the DOM\nvar NativeScriptAnimationEngine = (function (_super) {\n    __extends(NativeScriptAnimationEngine, _super);\n    function NativeScriptAnimationEngine() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    // this method is almost completely copied from\n    // the original animation engine, just replaced\n    // a few method invocations with overriden ones\n    NativeScriptAnimationEngine.prototype.animateTransition = function (element, instruction) {\n        var _this = this;\n        var triggerName = instruction.triggerName;\n        var previousPlayers;\n        if (instruction.isRemovalTransition) {\n            previousPlayers = this._onRemovalTransitionOverride(element);\n        }\n        else {\n            previousPlayers = [];\n            var existingTransitions = this._getTransitionAnimation(element);\n            var existingPlayer = existingTransitions ? existingTransitions[triggerName] : null;\n            if (existingPlayer) {\n                previousPlayers.push(existingPlayer);\n            }\n        }\n        // it's important to do this step before destroying the players\n        // so that the onDone callback below won\"t fire before this\n        dom_utils_1.eraseStylesOverride(element, instruction.fromStyles);\n        // we first run this so that the previous animation player\n        // data can be passed into the successive animation players\n        var totalTime = 0;\n        var players = instruction.timelines.map(function (timelineInstruction, i) {\n            totalTime = Math.max(totalTime, timelineInstruction.totalTime);\n            return _this._buildPlayer(element, timelineInstruction, previousPlayers, i);\n        });\n        previousPlayers.forEach(function (previousPlayer) { return previousPlayer.destroy(); });\n        var player = dom_utils_1.optimizeGroupPlayer(players);\n        player.onDone(function () {\n            player.destroy();\n            var elmTransitionMap = _this._getTransitionAnimation(element);\n            if (elmTransitionMap) {\n                delete elmTransitionMap[triggerName];\n                if (Object.keys(elmTransitionMap).length === 0) {\n                    _this._activeTransitionAnimations.delete(element);\n                }\n            }\n            dom_utils_1.deleteFromArrayMap(_this._activeElementAnimations, element, player);\n            dom_utils_1.setStyles(element, instruction.toStyles);\n        });\n        var elmTransitionMap = dom_utils_1.getOrSetAsInMap(this._activeTransitionAnimations, element, {});\n        elmTransitionMap[triggerName] = player;\n        this._queuePlayerOverride(element, triggerName, player, dom_utils_1.makeAnimationEvent(element, triggerName, instruction.fromState, instruction.toState, null, // this will be filled in during event creation\n        totalTime));\n        return player;\n    };\n    // overriden to use eachChild method of View\n    // instead of DOM querySelectorAll\n    NativeScriptAnimationEngine.prototype._onRemovalTransitionOverride = function (element) {\n        // when a parent animation is set to trigger a removal we want to\n        // find all of the children that are currently animating and clear\n        // them out by destroying each of them.\n        var elms = [];\n        element._eachChildView(function (child) {\n            if (dom_utils_1.cssClasses(child).get(MARKED_FOR_ANIMATION_SELECTOR)) {\n                elms.push(child);\n            }\n            return true;\n        });\n        var _loop_1 = function (i) {\n            var elm = elms[i];\n            var activePlayers = this_1._getElementAnimation(elm);\n            if (activePlayers) {\n                activePlayers.forEach(function (player) { return player.destroy(); });\n            }\n            var activeTransitions = this_1._getTransitionAnimation(elm);\n            if (activeTransitions) {\n                Object.keys(activeTransitions).forEach(function (triggerName) {\n                    var player = activeTransitions[triggerName];\n                    if (player) {\n                        player.destroy();\n                    }\n                });\n            }\n        };\n        var this_1 = this;\n        for (var i = 0; i < elms.length; i++) {\n            _loop_1(i);\n        }\n        // we make a copy of the array because the actual source array is modified\n        // each time a player is finished/destroyed (the forEach loop would fail otherwise)\n        return dom_utils_1.copyArray(this._getElementAnimation(element));\n    };\n    // overriden to use cssClasses method to access native element's styles\n    // instead of DOM element's classList\n    NativeScriptAnimationEngine.prototype._queuePlayerOverride = function (element, triggerName, player, event) {\n        var tuple = { element: element, player: player, triggerName: triggerName, event: event };\n        this._queuedTransitionAnimations.push(tuple);\n        player.init();\n        dom_utils_1.cssClasses(element).set(MARKED_FOR_ANIMATION_CLASSNAME, true);\n        player.onDone(function () { return dom_utils_1.cssClasses(element).set(MARKED_FOR_ANIMATION_CLASSNAME, false); });\n    };\n    NativeScriptAnimationEngine.prototype._getElementAnimation = function (element) {\n        return this._activeElementAnimations.get(element);\n    };\n    NativeScriptAnimationEngine.prototype._getTransitionAnimation = function (element) {\n        return this._activeTransitionAnimations.get(element);\n    };\n    return NativeScriptAnimationEngine;\n}(browser_1.ɵDomAnimationEngine));\nexports.NativeScriptAnimationEngine = NativeScriptAnimationEngine;\n//# sourceMappingURL=animation-engine.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/animations/animation-player.js":"var keyframe_animation_1 = require(\"ui/animation/keyframe-animation\");\nvar dependency_observable_1 = require(\"ui/core/dependency-observable\");\nvar utils_1 = require(\"./utils\");\nvar NativeScriptAnimationPlayer = (function () {\n    function NativeScriptAnimationPlayer(target, keyframes, duration, delay, easing) {\n        this.target = target;\n        this.parentPlayer = null;\n        this._startSubscriptions = [];\n        this._doneSubscriptions = [];\n        this._finished = false;\n        this._started = false;\n        this.initKeyframeAnimation(keyframes, duration, delay, easing);\n    }\n    NativeScriptAnimationPlayer.prototype.init = function () {\n    };\n    NativeScriptAnimationPlayer.prototype.hasStarted = function () {\n        return this._started;\n    };\n    NativeScriptAnimationPlayer.prototype.onStart = function (fn) { this._startSubscriptions.push(fn); };\n    NativeScriptAnimationPlayer.prototype.onDone = function (fn) { this._doneSubscriptions.push(fn); };\n    NativeScriptAnimationPlayer.prototype.onDestroy = function (fn) { this._doneSubscriptions.push(fn); };\n    NativeScriptAnimationPlayer.prototype.play = function () {\n        var _this = this;\n        if (!this.animation) {\n            return;\n        }\n        if (!this._started) {\n            this._started = true;\n            this._startSubscriptions.forEach(function (fn) { return fn(); });\n            this._startSubscriptions = [];\n        }\n        this.animation.play(this.target)\n            .then(function () { return _this.onFinish(); })\n            .catch(function (_e) { });\n    };\n    NativeScriptAnimationPlayer.prototype.pause = function () {\n        throw new Error(\"AnimationPlayer.pause method is not supported!\");\n    };\n    NativeScriptAnimationPlayer.prototype.finish = function () {\n        throw new Error(\"AnimationPlayer.finish method is not supported!\");\n    };\n    NativeScriptAnimationPlayer.prototype.reset = function () {\n        if (this.animation && this.animation.isPlaying) {\n            this.animation.cancel();\n        }\n    };\n    NativeScriptAnimationPlayer.prototype.restart = function () {\n        this.reset();\n        this.play();\n    };\n    NativeScriptAnimationPlayer.prototype.destroy = function () {\n        this.reset();\n        this.onFinish();\n    };\n    NativeScriptAnimationPlayer.prototype.setPosition = function (_p) {\n        throw new Error(\"AnimationPlayer.setPosition method is not supported!\");\n    };\n    NativeScriptAnimationPlayer.prototype.getPosition = function () {\n        return 0;\n    };\n    NativeScriptAnimationPlayer.prototype.initKeyframeAnimation = function (keyframes, duration, delay, easing) {\n        var info = new keyframe_animation_1.KeyframeAnimationInfo();\n        info.isForwards = true;\n        info.iterations = 1;\n        info.duration = duration === 0 ? 0.01 : duration;\n        info.delay = delay;\n        info.curve = utils_1.getAnimationCurve(easing);\n        info.keyframes = keyframes.map(utils_1.parseAnimationKeyframe);\n        this.animation = keyframe_animation_1.KeyframeAnimation.keyframeAnimationFromInfo(info, dependency_observable_1.ValueSource.VisualState);\n    };\n    NativeScriptAnimationPlayer.prototype.onFinish = function () {\n        if (!this._finished) {\n            this._finished = true;\n            this._started = false;\n            this._doneSubscriptions.forEach(function (fn) { return fn(); });\n            this._doneSubscriptions = [];\n        }\n    };\n    return NativeScriptAnimationPlayer;\n}());\nexports.NativeScriptAnimationPlayer = NativeScriptAnimationPlayer;\n//# sourceMappingURL=animation-player.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/animations/dom-utils.js":"var animations_1 = require(\"@angular/animations\");\nvar types_1 = require(\"utils/types\");\nvar dependency_observable_1 = require(\"ui/core/dependency-observable\");\nvar style_property_1 = require(\"ui/styling/style-property\");\nvar trace_1 = require(\"../trace\");\n// overriden to use the default 'unsetValue'\n// instead of empty string ''\nfunction eraseStylesOverride(element, styles) {\n    if (element[\"style\"]) {\n        Object.keys(styles).forEach(function (prop) { return setStyleProperty(element, prop, styles[prop]); });\n    }\n}\nexports.eraseStylesOverride = eraseStylesOverride;\nfunction cssClasses(element) {\n    if (!element.ngCssClasses) {\n        element.ngCssClasses = new Map();\n    }\n    return element.ngCssClasses;\n}\nexports.cssClasses = cssClasses;\n// The following functions are from\n// the original DomAnimationEngine\nfunction getOrSetAsInMap(map, key, defaultValue) {\n    var value = map.get(key);\n    if (!value) {\n        map.set(key, value = defaultValue);\n    }\n    return value;\n}\nexports.getOrSetAsInMap = getOrSetAsInMap;\nfunction deleteFromArrayMap(map, key, value) {\n    var arr = map.get(key);\n    if (arr) {\n        var index = arr.indexOf(value);\n        if (index >= 0) {\n            arr.splice(index, 1);\n            if (arr.length === 0) {\n                map.delete(key);\n            }\n        }\n    }\n}\nexports.deleteFromArrayMap = deleteFromArrayMap;\nfunction optimizeGroupPlayer(players) {\n    switch (players.length) {\n        case 0:\n            return new animations_1.NoopAnimationPlayer();\n        case 1:\n            return players[0];\n        default:\n            return new animations_1.ɵAnimationGroupPlayer(players);\n    }\n}\nexports.optimizeGroupPlayer = optimizeGroupPlayer;\nfunction copyArray(source) {\n    return source ? source.splice(0) : [];\n}\nexports.copyArray = copyArray;\nfunction makeAnimationEvent(element, triggerName, fromState, toState, phaseName, totalTime) {\n    return { element: element, triggerName: triggerName, fromState: fromState, toState: toState, phaseName: phaseName, totalTime: totalTime };\n}\nexports.makeAnimationEvent = makeAnimationEvent;\nfunction setStyles(element, styles) {\n    if (element[\"style\"]) {\n        Object.keys(styles).forEach(function (prop) { return setStyleProperty(element, prop, styles[prop]); });\n    }\n}\nexports.setStyles = setStyles;\n// utils for accessing NativeScript element's styles\nfunction setStyleProperty(element, name, value) {\n    style_property_1.withStyleProperty(name, value, function (property, resolvedValue) {\n        if (types_1.isString(property)) {\n            // Fallback to resolving property by name.\n            var resolvedProperty = style_property_1.getPropertyByName(name);\n            if (resolvedProperty) {\n                setStyleValue(element, resolvedProperty, resolvedValue);\n            }\n            else {\n                trace_1.rendererLog(\"Unknown style property: \" + property);\n            }\n        }\n        else {\n            var resolvedProperty = property;\n            setStyleValue(element, resolvedProperty, value);\n        }\n    });\n}\nfunction setStyleValue(view, property, value) {\n    try {\n        if (value === null) {\n            view.style._resetValue(property, dependency_observable_1.ValueSource.Local);\n        }\n        else {\n            view.style._setValue(property, value, dependency_observable_1.ValueSource.Local);\n        }\n    }\n    catch (ex) {\n        trace_1.styleError(\"Error setting property: \" + property.name + \" view: \" + view +\n            \" value: \" + value + \" \" + ex);\n    }\n}\n//# sourceMappingURL=dom-utils.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/animations/utils.js":"var enums_1 = require(\"ui/enums\");\nvar style_property_1 = require(\"ui/styling/style-property\");\nvar TRANSFORM_MATCHER = new RegExp(/(.+)\\((.+)\\)/);\nvar TRANSFORM_SPLITTER = new RegExp(/[\\s,]+/);\nvar STYLE_TRANSFORMATION_MAP = Object.freeze({\n    \"scale\": function (value) { return ({ property: \"scale\", value: value }); },\n    \"scale3d\": function (value) { return ({ property: \"scale\", value: value }); },\n    \"scaleX\": function (value) { return ({ property: \"scale\", value: { x: value, y: 1 } }); },\n    \"scaleY\": function (value) { return ({ property: \"scale\", value: { x: 1, y: value } }); },\n    \"translate\": function (value) { return ({ property: \"translate\", value: value }); },\n    \"translate3d\": function (value) { return ({ property: \"translate\", value: value }); },\n    \"translateX\": function (value) { return ({ property: \"translate\", value: { x: value, y: 0 } }); },\n    \"translateY\": function (value) { return ({ property: \"translate\", value: { x: 0, y: value } }); },\n    \"rotate\": function (value) { return ({ property: \"rotate\", value: value }); },\n    \"none\": function (_value) { return [\n        { property: \"scale\", value: { x: 1, y: 1 } },\n        { property: \"translate\", value: { x: 0, y: 0 } },\n        { property: \"rotate\", value: 0 },\n    ]; },\n});\nvar STYLE_CURVE_MAP = Object.freeze({\n    \"ease\": enums_1.AnimationCurve.ease,\n    \"linear\": enums_1.AnimationCurve.linear,\n    \"ease-in\": enums_1.AnimationCurve.easeIn,\n    \"ease-out\": enums_1.AnimationCurve.easeOut,\n    \"ease-in-out\": enums_1.AnimationCurve.easeInOut,\n    \"spring\": enums_1.AnimationCurve.spring,\n});\nfunction getAnimationCurve(value) {\n    if (!value) {\n        return enums_1.AnimationCurve.ease;\n    }\n    var curve = STYLE_CURVE_MAP[value];\n    if (curve) {\n        return curve;\n    }\n    var _a = TRANSFORM_MATCHER.exec(value) || [], _b = _a[1], property = _b === void 0 ? \"\" : _b, _c = _a[2], pointsString = _c === void 0 ? \"\" : _c;\n    var coords = pointsString.split(TRANSFORM_SPLITTER).map(stringToBezieCoords);\n    if (property !== \"cubic-bezier\" || coords.length !== 4) {\n        throw new Error(\"Invalid value for animation: \" + value);\n    }\n    else {\n        return (_d = enums_1.AnimationCurve).cubicBezier.apply(_d, coords);\n    }\n    var _d;\n}\nexports.getAnimationCurve = getAnimationCurve;\nfunction parseAnimationKeyframe(styles) {\n    var keyframeInfo = {};\n    keyframeInfo.duration = styles[\"offset\"];\n    keyframeInfo.declarations = Object.keys(styles).reduce(function (declarations, prop) {\n        var value = styles[prop];\n        var kebapCaseProp = prop.split(/(?=[A-Z])/).join(\"-\").toLowerCase();\n        var property = style_property_1.getPropertyByCssName(kebapCaseProp);\n        if (property) {\n            if (typeof value === \"string\" && property.valueConverter) {\n                value = property.valueConverter(value);\n            }\n            declarations.push({ property: property.name, value: value });\n        }\n        else if (typeof value === \"string\" && prop === \"transform\") {\n            declarations.push.apply(declarations, parseTransformation(value));\n        }\n        return declarations;\n    }, new Array());\n    return keyframeInfo;\n}\nexports.parseAnimationKeyframe = parseAnimationKeyframe;\nfunction stringToBezieCoords(value) {\n    var result = parseFloat(value);\n    if (result < 0) {\n        return 0;\n    }\n    else if (result > 1) {\n        return 1;\n    }\n    return result;\n}\nfunction parseTransformation(styleString) {\n    return parseStyle(styleString)\n        .reduce(function (transformations, style) {\n        var transform = STYLE_TRANSFORMATION_MAP[style.property](style.value);\n        if (Array.isArray(transform)) {\n            transformations.push.apply(transformations, transform);\n        }\n        else if (typeof transform !== \"undefined\") {\n            transformations.push(transform);\n        }\n        return transformations;\n    }, new Array());\n}\nfunction parseStyle(text) {\n    return text.split(TRANSFORM_SPLITTER).map(stringToTransformation).filter(function (t) { return !!t; });\n}\nfunction stringToTransformation(text) {\n    var _a = TRANSFORM_MATCHER.exec(text) || [], _b = _a[1], property = _b === void 0 ? \"\" : _b, _c = _a[2], stringValue = _c === void 0 ? \"\" : _c;\n    if (!property) {\n        return;\n    }\n    var _d = stringValue.split(\",\").map(parseFloat), x = _d[0], y = _d[1];\n    if (x && y) {\n        return { property: property, value: { x: x, y: y } };\n    }\n    else {\n        var value = x;\n        if (stringValue.slice(-3) === \"rad\") {\n            value *= 180.0 / Math.PI;\n        }\n        return { property: property, value: value };\n    }\n}\n//# sourceMappingURL=utils.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/common/detached-loader.js":"var core_1 = require(\"@angular/core\");\nvar trace_1 = require(\"trace\");\nexports.CATEGORY = \"detached-loader\";\nfunction log(message) {\n    trace_1.write(message, exports.CATEGORY);\n}\n/**\n * Wrapper component used for loading components when navigating\n * It uses DetachedContainer as selector so that it is containerRef is not attached to\n * the visual tree.\n */\nvar DetachedLoader = (function () {\n    function DetachedLoader(resolver, changeDetector, containerRef) {\n        this.resolver = resolver;\n        this.changeDetector = changeDetector;\n        this.containerRef = containerRef;\n    }\n    DetachedLoader.prototype.loadInLocation = function (componentType) {\n        var factory = this.resolver.resolveComponentFactory(componentType);\n        var componentRef = this.containerRef.createComponent(factory, this.containerRef.length, this.containerRef.parentInjector);\n        // Component is created, buit may not be checked if we are loading\n        // inside component with OnPush CD strategy. Mark us for check to be sure CD will reach us.\n        // We are inside a promise here so no need for setTimeout - CD should trigger\n        // after the promise.\n        log(\"DetachedLoader.loadInLocation component loaded -> markForCheck\");\n        return Promise.resolve(componentRef);\n    };\n    DetachedLoader.prototype.detectChanges = function () {\n        this.changeDetector.markForCheck();\n    };\n    // TODO: change this API -- async promises not needed here anymore.\n    DetachedLoader.prototype.loadComponent = function (componentType) {\n        log(\"DetachedLoader.loadComponent\");\n        return this.loadInLocation(componentType);\n    };\n    DetachedLoader.prototype.loadWithFactory = function (factory) {\n        return this.containerRef.createComponent(factory, this.containerRef.length, this.containerRef.parentInjector, null);\n    };\n    return DetachedLoader;\n}());\nDetachedLoader = __decorate([\n    core_1.Component({\n        selector: \"DetachedContainer\",\n        template: \"<Placeholder #loader></Placeholder>\"\n    }),\n    __metadata(\"design:paramtypes\", [core_1.ComponentFactoryResolver,\n        core_1.ChangeDetectorRef,\n        core_1.ViewContainerRef])\n], DetachedLoader);\nexports.DetachedLoader = DetachedLoader;\n//# sourceMappingURL=detached-loader.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/directives/action-bar.js":"var core_1 = require(\"@angular/core\");\nvar action_bar_1 = require(\"ui/action-bar\");\nvar lang_facade_1 = require(\"../lang-facade\");\nvar page_1 = require(\"ui/page\");\nvar view_1 = require(\"ui/core/view\");\nvar element_registry_1 = require(\"../element-registry\");\nvar actionBarMeta = {\n    skipAddToDom: true,\n    insertChild: function (parent, child, atIndex) {\n        var bar = parent;\n        var childView = child;\n        if (child instanceof action_bar_1.NavigationButton) {\n            bar.navigationButton = childView;\n            childView.parent = bar;\n        }\n        else if (child instanceof action_bar_1.ActionItem) {\n            bar.actionItems.addItem(childView);\n            childView.parent = bar;\n        }\n        else if (child.nodeName === \"#comment\") {\n            bar._addView(childView, atIndex);\n        }\n        else if (child instanceof view_1.View) {\n            bar.titleView = childView;\n        }\n    },\n    removeChild: function (parent, child) {\n        var bar = parent;\n        var childView = child;\n        if (child instanceof action_bar_1.NavigationButton) {\n            if (bar.navigationButton === childView) {\n                bar.navigationButton = null;\n            }\n            childView.parent = null;\n        }\n        else if (child instanceof action_bar_1.ActionItem) {\n            bar.actionItems.removeItem(childView);\n            childView.parent = null;\n        }\n        else if (child instanceof view_1.View && bar.titleView && bar.titleView === childView) {\n            bar.titleView = null;\n        }\n    },\n};\nelement_registry_1.registerElement(\"ActionBar\", function () { return require(\"ui/action-bar\").ActionBar; }, actionBarMeta);\nelement_registry_1.registerElement(\"ActionItem\", function () { return require(\"ui/action-bar\").ActionItem; });\nelement_registry_1.registerElement(\"NavigationButton\", function () { return require(\"ui/action-bar\").NavigationButton; });\nvar ActionBarComponent = (function () {\n    function ActionBarComponent(element, page) {\n        this.element = element;\n        this.page = page;\n        if (lang_facade_1.isBlank(this.page.actionBarHidden)) {\n            this.page.actionBarHidden = false;\n        }\n        this.page.actionBar = this.element.nativeElement;\n        this.page.actionBar.update();\n    }\n    return ActionBarComponent;\n}());\nActionBarComponent = __decorate([\n    core_1.Component({\n        selector: \"ActionBar\",\n        template: \"<ng-content></ng-content>\"\n    }),\n    __metadata(\"design:paramtypes\", [core_1.ElementRef, page_1.Page])\n], ActionBarComponent);\nexports.ActionBarComponent = ActionBarComponent;\nvar ActionBarScope = (function () {\n    function ActionBarScope(page) {\n        this.page = page;\n    }\n    ActionBarScope.prototype.onNavButtonInit = function (navBtn) {\n        this.page.actionBar.navigationButton = navBtn.element.nativeElement;\n    };\n    ActionBarScope.prototype.onNavButtonDestroy = function (navBtn) {\n        var nav = navBtn.element.nativeElement;\n        if (nav && this.page.actionBar.navigationButton === nav) {\n            this.page.actionBar.navigationButton = null;\n        }\n    };\n    ActionBarScope.prototype.onActionInit = function (item) {\n        this.page.actionBar.actionItems.addItem(item.element.nativeElement);\n    };\n    ActionBarScope.prototype.onActionDestroy = function (item) {\n        if (item.element.nativeElement.actionBar) {\n            this.page.actionBar.actionItems.removeItem(item.element.nativeElement);\n        }\n    };\n    return ActionBarScope;\n}());\nActionBarScope = __decorate([\n    core_1.Component({\n        selector: \"ActionBarExtension\",\n        template: \"\"\n    }),\n    __metadata(\"design:paramtypes\", [page_1.Page])\n], ActionBarScope);\nexports.ActionBarScope = ActionBarScope;\nvar ActionItemDirective = (function () {\n    function ActionItemDirective(element, ownerScope) {\n        this.element = element;\n        this.ownerScope = ownerScope;\n        if (this.ownerScope) {\n            this.ownerScope.onActionInit(this);\n        }\n    }\n    ActionItemDirective.prototype.ngOnDestroy = function () {\n        if (this.ownerScope) {\n            this.ownerScope.onActionDestroy(this);\n        }\n    };\n    return ActionItemDirective;\n}());\nActionItemDirective = __decorate([\n    core_1.Directive({\n        selector: \"ActionItem\" // tslint:disable-line:directive-selector\n    }),\n    __param(1, core_1.Optional()),\n    __metadata(\"design:paramtypes\", [core_1.ElementRef, ActionBarScope])\n], ActionItemDirective);\nexports.ActionItemDirective = ActionItemDirective;\nvar NavigationButtonDirective = (function () {\n    function NavigationButtonDirective(element, ownerScope) {\n        this.element = element;\n        this.ownerScope = ownerScope;\n        if (this.ownerScope) {\n            this.ownerScope.onNavButtonInit(this);\n        }\n    }\n    NavigationButtonDirective.prototype.ngOnDestroy = function () {\n        if (this.ownerScope) {\n            this.ownerScope.onNavButtonDestroy(this);\n        }\n    };\n    return NavigationButtonDirective;\n}());\nNavigationButtonDirective = __decorate([\n    core_1.Directive({\n        selector: \"NavigationButton\" // tslint:disable-line:directive-selector\n    }),\n    __param(1, core_1.Optional()),\n    __metadata(\"design:paramtypes\", [core_1.ElementRef, ActionBarScope])\n], NavigationButtonDirective);\nexports.NavigationButtonDirective = NavigationButtonDirective;\n//# sourceMappingURL=action-bar.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/directives/platform-filters.js":"var core_1 = require(\"@angular/core\");\nvar platform_1 = require(\"platform\");\nvar platform_providers_1 = require(\"../platform-providers\");\nvar AndroidFilterComponent = (function () {\n    function AndroidFilterComponent(device) {\n        this.show = (device.os === platform_1.platformNames.android);\n    }\n    return AndroidFilterComponent;\n}());\nAndroidFilterComponent = __decorate([\n    core_1.Component({\n        selector: \"android\",\n        template: \"<ng-content *ngIf=\\\"show\\\"></ng-content>\",\n    }),\n    __param(0, core_1.Inject(platform_providers_1.DEVICE)),\n    __metadata(\"design:paramtypes\", [Object])\n], AndroidFilterComponent);\nexports.AndroidFilterComponent = AndroidFilterComponent;\nvar IosFilterComponent = (function () {\n    function IosFilterComponent(device) {\n        this.show = (device.os === platform_1.platformNames.ios);\n    }\n    return IosFilterComponent;\n}());\nIosFilterComponent = __decorate([\n    core_1.Component({\n        selector: \"ios\",\n        template: \"<ng-content *ngIf=\\\"show\\\"></ng-content>\",\n    }),\n    __param(0, core_1.Inject(platform_providers_1.DEVICE)),\n    __metadata(\"design:paramtypes\", [Object])\n], IosFilterComponent);\nexports.IosFilterComponent = IosFilterComponent;\n//# sourceMappingURL=platform-filters.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/directives/tab-view.js":"var core_1 = require(\"@angular/core\");\nvar tab_view_1 = require(\"ui/tab-view\");\nvar utils_1 = require(\"../common/utils\");\nvar trace_1 = require(\"../trace\");\nvar lang_facade_1 = require(\"../lang-facade\");\nvar TabViewDirective = (function () {\n    function TabViewDirective(element) {\n        this.tabView = element.nativeElement;\n    }\n    Object.defineProperty(TabViewDirective.prototype, \"selectedIndex\", {\n        get: function () {\n            return this._selectedIndex;\n        },\n        set: function (value) {\n            this._selectedIndex = utils_1.convertToInt(value);\n            if (this.viewInitialized) {\n                this.tabView.selectedIndex = this._selectedIndex;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TabViewDirective.prototype.ngAfterViewInit = function () {\n        this.viewInitialized = true;\n        trace_1.rendererLog(\"this._selectedIndex: \" + this._selectedIndex);\n        if (!lang_facade_1.isBlank(this._selectedIndex)) {\n            this.tabView.selectedIndex = this._selectedIndex;\n        }\n    };\n    return TabViewDirective;\n}());\n__decorate([\n    core_1.Input(),\n    __metadata(\"design:type\", Number),\n    __metadata(\"design:paramtypes\", [Object])\n], TabViewDirective.prototype, \"selectedIndex\", null);\nTabViewDirective = __decorate([\n    core_1.Directive({\n        selector: \"TabView\",\n    }),\n    __metadata(\"design:paramtypes\", [core_1.ElementRef])\n], TabViewDirective);\nexports.TabViewDirective = TabViewDirective;\nvar TabViewItemDirective = (function () {\n    function TabViewItemDirective(owner, templateRef, viewContainer) {\n        this.owner = owner;\n        this.templateRef = templateRef;\n        this.viewContainer = viewContainer;\n    }\n    Object.defineProperty(TabViewItemDirective.prototype, \"title\", {\n        get: function () {\n            return this._title;\n        },\n        set: function (value) {\n            if (this._title !== value) {\n                this._title = value;\n                this.ensureItem();\n                this.item.title = this._title;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TabViewItemDirective.prototype, \"iconSource\", {\n        get: function () {\n            return this._iconSource;\n        },\n        set: function (value) {\n            if (this._iconSource !== value) {\n                this._iconSource = value;\n                this.ensureItem();\n                this.item.iconSource = this._iconSource;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TabViewItemDirective.prototype.ensureItem = function () {\n        if (!this.item) {\n            this.item = new tab_view_1.TabViewItem();\n        }\n    };\n    TabViewItemDirective.prototype.ngOnInit = function () {\n        this.ensureItem();\n        if (this.config) {\n            this.item.title = this._title || this.config.title;\n            this.item.iconSource = this._iconSource || this.config.iconSource;\n        }\n        var viewRef = this.viewContainer.createEmbeddedView(this.templateRef);\n        // Filter out text nodes, etc\n        var realViews = viewRef.rootNodes.filter(function (node) {\n            return node.nodeName && node.nodeName !== \"#text\";\n        });\n        if (realViews.length > 0) {\n            this.item.view = realViews[0];\n            var newItems = (this.owner.tabView.items || []).concat([this.item]);\n            this.owner.tabView.items = newItems;\n        }\n    };\n    return TabViewItemDirective;\n}());\n__decorate([\n    core_1.Input(\"tabItem\"),\n    __metadata(\"design:type\", Object)\n], TabViewItemDirective.prototype, \"config\", void 0);\n__decorate([\n    core_1.Input(),\n    __metadata(\"design:type\", Object),\n    __metadata(\"design:paramtypes\", [String])\n], TabViewItemDirective.prototype, \"title\", null);\n__decorate([\n    core_1.Input(),\n    __metadata(\"design:type\", Object),\n    __metadata(\"design:paramtypes\", [String])\n], TabViewItemDirective.prototype, \"iconSource\", null);\nTabViewItemDirective = __decorate([\n    core_1.Directive({\n        selector: \"[tabItem]\" // tslint:disable-line:directive-selector\n    }),\n    __metadata(\"design:paramtypes\", [TabViewDirective,\n        core_1.TemplateRef,\n        core_1.ViewContainerRef])\n], TabViewItemDirective);\nexports.TabViewItemDirective = TabViewItemDirective;\n//# sourceMappingURL=tab-view.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/hooks/before-livesync.js":"module.exports = function ($usbLiveSyncService) {\n    $usbLiveSyncService.forceExecuteFullSync = false;\n};\n","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/polyfills/array.js":"if (!Array.prototype.fill) {\n    Array.prototype.fill = function (value) {\n        var O = Object(this);\n        var len = parseInt(O.length, 10);\n        var start = arguments[1];\n        var relativeStart = parseInt(start, 10) || 0;\n        var k = relativeStart < 0\n            ? Math.max(len + relativeStart, 0)\n            : Math.min(relativeStart, len);\n        var end = arguments[2];\n        var relativeEnd = end === undefined\n            ? len\n            : (parseInt(end, 10) || 0);\n        var final = relativeEnd < 0\n            ? Math.max(len + relativeEnd, 0)\n            : Math.min(relativeEnd, len);\n        for (; k < final; k++) {\n            O[k] = value;\n        }\n        return O;\n    };\n}\nif (!Array.from) {\n    Array.from = function (iterable, mapFn, thisArg) {\n        var results = [];\n        if (iterable.next) {\n            // Iterator objects\n            for (var step = null;; step = iterable.next()) {\n                if (step.done) {\n                    break;\n                }\n                else {\n                    results.push(step.value);\n                }\n            }\n        }\n        else {\n            // Array-like objects\n            results = [].slice.call(iterable);\n        }\n        if (mapFn) {\n            results = results.forEach(mapFn, thisArg);\n        }\n        return results;\n    };\n}\n//# sourceMappingURL=array.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/polyfills/console.js":"if (!console.group) {\n    console.group = function () { };\n}\nif (!console.groupEnd) {\n    console.groupEnd = function () { };\n}\n//# sourceMappingURL=console.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/router/ns-location-strategy.js":"var core_1 = require(\"@angular/core\");\nvar common_1 = require(\"@angular/common\");\nvar trace_1 = require(\"../trace\");\nvar frame_1 = require(\"ui/frame\");\nvar lang_facade_1 = require(\"../lang-facade\");\nvar defaultNavOptions = {\n    clearHistory: false,\n    animated: true\n};\nvar NSLocationStrategy = (function (_super) {\n    __extends(NSLocationStrategy, _super);\n    function NSLocationStrategy(frame) {\n        var _this = _super.call(this) || this;\n        _this.frame = frame;\n        _this.states = new Array();\n        _this.popStateCallbacks = new Array();\n        _this._isPageNavigationBack = false;\n        trace_1.routerLog(\"NSLocationStrategy.constructor()\");\n        return _this;\n    }\n    NSLocationStrategy.prototype.path = function () {\n        var state = this.peekState();\n        var result = state ? state.url : \"/\";\n        trace_1.routerLog(\"NSLocationStrategy.path(): \" + result);\n        return result;\n    };\n    NSLocationStrategy.prototype.prepareExternalUrl = function (internal) {\n        trace_1.routerLog(\"NSLocationStrategy.prepareExternalUrl() internal: \" + internal);\n        return internal;\n    };\n    NSLocationStrategy.prototype.pushState = function (state, title, url, queryParams) {\n        trace_1.routerLog(\"NSLocationStrategy.pushState state: \" +\n            (state + \", title: \" + title + \", url: \" + url + \", queryParams: \" + queryParams));\n        this.pushStateInternal(state, title, url, queryParams);\n    };\n    NSLocationStrategy.prototype.pushStateInternal = function (state, title, url, queryParams) {\n        var isNewPage = this.states.length === 0;\n        this.states.push({\n            state: state,\n            title: title,\n            url: url,\n            queryParams: queryParams,\n            isPageNavigation: isNewPage\n        });\n    };\n    NSLocationStrategy.prototype.replaceState = function (state, title, url, queryParams) {\n        if (this.states.length > 0) {\n            trace_1.routerLog(\"NSLocationStrategy.replaceState changing exisitng state: \" +\n                (state + \", title: \" + title + \", url: \" + url + \", queryParams: \" + queryParams));\n            var topState = this.peekState();\n            topState.state = state;\n            topState.title = title;\n            topState.url = url;\n            topState.queryParams = queryParams;\n        }\n        else {\n            trace_1.routerLog(\"NSLocationStrategy.replaceState pushing new state: \" +\n                (state + \", title: \" + title + \", url: \" + url + \", queryParams: \" + queryParams));\n            this.pushStateInternal(state, title, url, queryParams);\n        }\n    };\n    NSLocationStrategy.prototype.forward = function () {\n        throw new Error(\"NSLocationStrategy.forward() - not implemented\");\n    };\n    NSLocationStrategy.prototype.back = function () {\n        if (this._isPageNavigationBack) {\n            // We are navigating to the previous page \n            // clear the stack until we get to a page navigation state\n            var state = this.states.pop();\n            var count = 1;\n            while (!(state.isPageNavigation)) {\n                state = this.states.pop();\n                count++;\n            }\n            trace_1.routerLog(\"NSLocationStrategy.back() while navigating back. States popped: \" + count);\n            this.callPopState(state, true);\n        }\n        else {\n            var state = this.peekState();\n            if (state.isPageNavigation) {\n                // This was a page navigation - so navigate through frame.\n                trace_1.routerLog(\"NSLocationStrategy.back() while not navigating back but top\" +\n                    \" state is page - will call frame.goback()\");\n                this.frame.goBack();\n            }\n            else {\n                // Nested navigation - just pop the state\n                trace_1.routerLog(\"NSLocationStrategy.back() while not navigating back but top\" +\n                    \" state is not page - just pop\");\n                this.callPopState(this.states.pop(), true);\n            }\n        }\n    };\n    NSLocationStrategy.prototype.canGoBack = function () {\n        return this.states.length > 1;\n    };\n    NSLocationStrategy.prototype.onPopState = function (fn) {\n        trace_1.routerLog(\"NSLocationStrategy.onPopState\");\n        this.popStateCallbacks.push(fn);\n    };\n    NSLocationStrategy.prototype.getBaseHref = function () {\n        trace_1.routerLog(\"NSLocationStrategy.getBaseHref()\");\n        return \"\";\n    };\n    NSLocationStrategy.prototype.callPopState = function (state, pop) {\n        if (pop === void 0) { pop = true; }\n        var change = { url: state.url, pop: pop };\n        for (var _i = 0, _a = this.popStateCallbacks; _i < _a.length; _i++) {\n            var fn = _a[_i];\n            fn(change);\n        }\n    };\n    NSLocationStrategy.prototype.peekState = function () {\n        if (this.states.length > 0) {\n            return this.states[this.states.length - 1];\n        }\n        return null;\n    };\n    NSLocationStrategy.prototype.toString = function () {\n        return this.states\n            .map(function (v, i) { return i + \".[\" + (v.isPageNavigation ? \"PAGE\" : \"INTERNAL\") + \"] \\\"\" + v.url + \"\\\"\"; })\n            .reverse()\n            .join(\"\\n\");\n    };\n    // Methods for syncing with page navigation in PageRouterOutlet\n    NSLocationStrategy.prototype._beginBackPageNavigation = function () {\n        trace_1.routerLog(\"NSLocationStrategy.startGoBack()\");\n        if (this._isPageNavigationBack) {\n            throw new Error(\"Calling startGoBack while going back.\");\n        }\n        this._isPageNavigationBack = true;\n    };\n    NSLocationStrategy.prototype._finishBackPageNavigation = function () {\n        trace_1.routerLog(\"NSLocationStrategy.finishBackPageNavigation()\");\n        if (!this._isPageNavigationBack) {\n            throw new Error(\"Calling endGoBack while not going back.\");\n        }\n        this._isPageNavigationBack = false;\n    };\n    NSLocationStrategy.prototype._isPageNavigatingBack = function () {\n        return this._isPageNavigationBack;\n    };\n    NSLocationStrategy.prototype._beginPageNavigation = function () {\n        trace_1.routerLog(\"NSLocationStrategy._beginPageNavigation()\");\n        var lastState = this.peekState();\n        if (lastState) {\n            lastState.isPageNavigation = true;\n        }\n        var navOptions = this._currentNavigationOptions || defaultNavOptions;\n        if (navOptions.clearHistory) {\n            trace_1.routerLog(\"NSLocationStrategy._beginPageNavigation clearing states history\");\n            this.states = [lastState];\n        }\n        this._currentNavigationOptions = undefined;\n        return navOptions;\n    };\n    NSLocationStrategy.prototype._setNavigationOptions = function (options) {\n        this._currentNavigationOptions = {\n            clearHistory: lang_facade_1.isPresent(options.clearHistory) ? options.clearHistory : false,\n            animated: lang_facade_1.isPresent(options.animated) ? options.animated : true,\n            transition: options.transition\n        };\n        trace_1.routerLog(\"NSLocationStrategy._setNavigationOptions(\" +\n            (JSON.stringify(this._currentNavigationOptions) + \")\"));\n    };\n    NSLocationStrategy.prototype._getStates = function () {\n        return this.states.slice();\n    };\n    return NSLocationStrategy;\n}(common_1.LocationStrategy));\nNSLocationStrategy = __decorate([\n    core_1.Injectable(),\n    __metadata(\"design:paramtypes\", [frame_1.Frame])\n], NSLocationStrategy);\nexports.NSLocationStrategy = NSLocationStrategy;\n//# sourceMappingURL=ns-location-strategy.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/router/ns-module-factory-loader.js":"var core_1 = require(\"@angular/core\");\nvar file_system_1 = require(\"file-system\");\nvar SEPARATOR = \"#\";\nvar NSModuleFactoryLoader = (function () {\n    function NSModuleFactoryLoader(compiler, ngModuleLoader) {\n        this.compiler = compiler;\n        this.ngModuleLoader = ngModuleLoader;\n        this.offlineMode = compiler instanceof core_1.Compiler;\n    }\n    NSModuleFactoryLoader.prototype.load = function (path) {\n        if (this.offlineMode) {\n            return this.ngModuleLoader.load(path);\n        }\n        else {\n            return this.loadAndCompile(path);\n        }\n    };\n    NSModuleFactoryLoader.prototype.loadAndCompile = function (path) {\n        var _a = splitPath(path), modulePath = _a.modulePath, exportName = _a.exportName;\n        var loadedModule = global.require(modulePath)[exportName];\n        checkNotEmpty(loadedModule, modulePath, exportName);\n        return Promise.resolve(this.compiler.compileModuleAsync(loadedModule));\n    };\n    return NSModuleFactoryLoader;\n}());\nNSModuleFactoryLoader = __decorate([\n    core_1.Injectable(),\n    __metadata(\"design:paramtypes\", [core_1.Compiler, core_1.SystemJsNgModuleLoader])\n], NSModuleFactoryLoader);\nexports.NSModuleFactoryLoader = NSModuleFactoryLoader;\nfunction splitPath(path) {\n    var _a = path.split(SEPARATOR), modulePath = _a[0], exportName = _a[1];\n    modulePath = getAbsolutePath(modulePath);\n    if (typeof exportName === \"undefined\") {\n        exportName = \"default\";\n    }\n    return { modulePath: modulePath, exportName: exportName };\n}\nfunction getAbsolutePath(relativePath) {\n    return file_system_1.path.normalize(file_system_1.path.join(file_system_1.knownFolders.currentApp().path, relativePath));\n}\nfunction checkNotEmpty(value, modulePath, exportName) {\n    if (!value) {\n        throw new Error(\"Cannot find '\" + exportName + \"' in '\" + modulePath + \"'\");\n    }\n    return value;\n}\n//# sourceMappingURL=ns-module-factory-loader.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/router/ns-platform-location.js":"var ns_location_strategy_1 = require(\"./ns-location-strategy\");\nvar common_1 = require(\"@angular/common\");\nvar core_1 = require(\"@angular/core\");\nvar trace_1 = require(\"../trace\");\nvar NativescriptPlatformLocation = (function (_super) {\n    __extends(NativescriptPlatformLocation, _super);\n    function NativescriptPlatformLocation(locationStartegy) {\n        var _this = _super.call(this) || this;\n        _this.locationStartegy = locationStartegy;\n        trace_1.routerLog(\"NativescriptPlatformLocation.constructor()\");\n        return _this;\n    }\n    NativescriptPlatformLocation.prototype.getBaseHrefFromDOM = function () {\n        return \"/\";\n    };\n    NativescriptPlatformLocation.prototype.onPopState = function (fn) {\n        this.locationStartegy.onPopState(fn);\n    };\n    NativescriptPlatformLocation.prototype.onHashChange = function (_fn) {\n    };\n    Object.defineProperty(NativescriptPlatformLocation.prototype, \"search\", {\n        get: function () {\n            return \"\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NativescriptPlatformLocation.prototype, \"hash\", {\n        get: function () {\n            return \"\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NativescriptPlatformLocation.prototype, \"pathname\", {\n        get: function () {\n            return this.locationStartegy.path();\n        },\n        set: function (_newPath) {\n            throw new Error(\"NativescriptPlatformLocation set pathname - not implemented\");\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NativescriptPlatformLocation.prototype.pushState = function (state, title, url) {\n        this.locationStartegy.pushState(state, title, url, null);\n    };\n    NativescriptPlatformLocation.prototype.replaceState = function (state, title, url) {\n        this.locationStartegy.replaceState(state, title, url, null);\n    };\n    NativescriptPlatformLocation.prototype.forward = function () {\n        throw new Error(\"NativescriptPlatformLocation.forward() - not implemented\");\n    };\n    NativescriptPlatformLocation.prototype.back = function () {\n        this.locationStartegy.back();\n    };\n    return NativescriptPlatformLocation;\n}(common_1.PlatformLocation));\nNativescriptPlatformLocation = __decorate([\n    core_1.Injectable(),\n    __metadata(\"design:paramtypes\", [ns_location_strategy_1.NSLocationStrategy])\n], NativescriptPlatformLocation);\nexports.NativescriptPlatformLocation = NativescriptPlatformLocation;\n//# sourceMappingURL=ns-platform-location.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/router/ns-router-link-active.js":"var core_1 = require(\"@angular/core\");\nvar router_1 = require(\"@angular/router\");\nvar router_url_tree_1 = require(\"../router-url-tree\");\nvar ns_router_link_1 = require(\"./ns-router-link\");\n/**\n * The NSRouterLinkActive directive lets you add a CSS class to an element when the link\"s route\n * becomes active.\n *\n * Consider the following example:\n *\n * ```\n * <a [nsRouterLink]=\"/user/bob\" [nsRouterLinkActive]=\"active-link\">Bob</a>\n * ```\n *\n * When the url is either \"/user\" or \"/user/bob\", the active-link class will\n * be added to the component. If the url changes, the class will be removed.\n *\n * You can set more than one class, as follows:\n *\n * ```\n * <a [nsRouterLink]=\"/user/bob\" [nsRouterLinkActive]=\"class1 class2\">Bob</a>\n * <a [nsRouterLink]=\"/user/bob\" [nsRouterLinkActive]=\"[\"class1\", \"class2\"]\">Bob</a>\n * ```\n *\n * You can configure NSRouterLinkActive by passing `exact: true`. This will add the\n * classes only when the url matches the link exactly.\n *\n * ```\n * <a [nsRouterLink]=\"/user/bob\" [nsRouterLinkActive]=\"active-link\"\n * [nsRouterLinkActiveOptions]=\"{exact: true}\">Bob</a>\n * ```\n *\n * Finally, you can apply the NSRouterLinkActive directive to an ancestor of a RouterLink.\n *\n * ```\n * <div [nsRouterLinkActive]=\"active-link\" [nsRouterLinkActiveOptions]=\"{exact: true}\">\n *   <a [nsRouterLink]=\"/user/jim\">Jim</a>\n *   <a [nsRouterLink]=\"/user/bob\">Bob</a>\n * </div>\n * ```\n *\n * This will set the active-link class on the div tag if the url is either \"/user/jim\" or\n * \"/user/bob\".\n *\n * @stable\n */\nvar NSRouterLinkActive = (function () {\n    function NSRouterLinkActive(router, element, renderer) {\n        var _this = this;\n        this.router = router;\n        this.element = element;\n        this.renderer = renderer;\n        this.classes = [];\n        this.nsRouterLinkActiveOptions = { exact: false };\n        this.subscription = router.events.subscribe(function (s) {\n            if (s instanceof router_1.NavigationEnd) {\n                _this.update();\n            }\n        });\n    }\n    NSRouterLinkActive.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this.links.changes.subscribe(function () { return _this.update(); });\n        this.update();\n    };\n    Object.defineProperty(NSRouterLinkActive.prototype, \"nsRouterLinkActive\", {\n        set: function (data) {\n            if (Array.isArray(data)) {\n                this.classes = data;\n            }\n            else {\n                this.classes = data.split(\" \");\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NSRouterLinkActive.prototype.ngOnChanges = function (_) { this.update(); };\n    NSRouterLinkActive.prototype.ngOnDestroy = function () { this.subscription.unsubscribe(); };\n    NSRouterLinkActive.prototype.update = function () {\n        var _this = this;\n        if (!this.links) {\n            return;\n        }\n        var currentUrlTree = this.router.parseUrl(this.router.url);\n        var isActiveLinks = this.reduceList(currentUrlTree, this.links);\n        this.classes.forEach(function (c) { return _this.renderer.setElementClass(_this.element.nativeElement, c, isActiveLinks); });\n    };\n    NSRouterLinkActive.prototype.reduceList = function (currentUrlTree, q) {\n        var _this = this;\n        return q.reduce(function (res, link) {\n            return res || router_url_tree_1.containsTree(currentUrlTree, link.urlTree, _this.nsRouterLinkActiveOptions.exact);\n        }, false);\n    };\n    return NSRouterLinkActive;\n}());\n__decorate([\n    core_1.ContentChildren(ns_router_link_1.NSRouterLink),\n    __metadata(\"design:type\", core_1.QueryList)\n], NSRouterLinkActive.prototype, \"links\", void 0);\n__decorate([\n    core_1.Input(),\n    __metadata(\"design:type\", Object)\n], NSRouterLinkActive.prototype, \"nsRouterLinkActiveOptions\", void 0);\n__decorate([\n    core_1.Input(\"nsRouterLinkActive\"),\n    __metadata(\"design:type\", Object),\n    __metadata(\"design:paramtypes\", [Object])\n], NSRouterLinkActive.prototype, \"nsRouterLinkActive\", null);\nNSRouterLinkActive = __decorate([\n    core_1.Directive({ selector: \"[nsRouterLinkActive]\" }),\n    __metadata(\"design:paramtypes\", [router_1.Router, core_1.ElementRef, core_1.Renderer])\n], NSRouterLinkActive);\nexports.NSRouterLinkActive = NSRouterLinkActive;\n//# sourceMappingURL=ns-router-link-active.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/router/ns-router-link.js":"var core_1 = require(\"@angular/core\");\nvar router_1 = require(\"@angular/router\");\nvar trace_1 = require(\"../trace\");\nvar page_router_outlet_1 = require(\"./page-router-outlet\");\nvar router_extensions_1 = require(\"./router-extensions\");\nvar types_1 = require(\"utils/types\");\n/**\n * The nsRouterLink directive lets you link to specific parts of your app.\n *\n * Consider the following route configuration:\n * ```\n * [{ path: \"/user\", component: UserCmp }]\n * ```\n *\n * When linking to this `User` route, you can write:\n *\n * ```\n * <a [nsRouterLink]=\"[\"/user\"]\">link to user component</a>\n * ```\n *\n * NSRouterLink expects the value to be an array of path segments, followed by the params\n * for that level of routing. For instance `[\"/team\", {teamId: 1}, \"user\", {userId: 2}]`\n * means that we want to generate a link to `/team;teamId=1/user;userId=2`.\n *\n * The first segment name can be prepended with `/`, `./`, or `../`.\n * If the segment begins with `/`, the router will look up the route from the root of the app.\n * If the segment begins with `./`, or doesn\"t begin with a slash, the router will\n * instead look in the current component\"s children for the route.\n * And if the segment begins with `../`, the router will go up one level.\n */\nvar NSRouterLink = (function () {\n    function NSRouterLink(router, navigator, route, pageRoute) {\n        this.router = router;\n        this.navigator = navigator;\n        this.route = route;\n        this.pageRoute = pageRoute;\n        this.commands = [];\n        this.pageTransition = true;\n        this.usePageRoute = (this.pageRoute && this.route === this.pageRoute.activatedRoute.getValue());\n    }\n    Object.defineProperty(NSRouterLink.prototype, \"currentRoute\", {\n        get: function () {\n            return this.usePageRoute ? this.pageRoute.activatedRoute.getValue() : this.route;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NSRouterLink.prototype, \"params\", {\n        set: function (data) {\n            if (Array.isArray(data)) {\n                this.commands = data;\n            }\n            else {\n                this.commands = [data];\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NSRouterLink.prototype.onTap = function () {\n        trace_1.routerLog(\"nsRouterLink.tapped: \" + this.commands + \" usePageRoute: \" +\n            this.usePageRoute + \" clearHistory: \" + this.clearHistory + \" transition: \" +\n            JSON.stringify(this.pageTransition));\n        var extras = this.getExtras();\n        this.navigator.navigateByUrl(this.urlTree, extras);\n    };\n    NSRouterLink.prototype.getExtras = function () {\n        var transition = this.getTransition();\n        return {\n            queryParams: this.queryParams,\n            fragment: this.fragment,\n            clearHistory: this.clearHistory,\n            animated: transition.animated,\n            transition: transition.transition,\n            relativeTo: this.currentRoute,\n        };\n    };\n    NSRouterLink.prototype.getTransition = function () {\n        if (typeof this.pageTransition === \"boolean\") {\n            return { animated: this.pageTransition };\n        }\n        else if (types_1.isString(this.pageTransition)) {\n            if (this.pageTransition === \"none\" || this.pageTransition === \"false\") {\n                return { animated: false };\n            }\n            else {\n                return { animated: true, transition: { name: this.pageTransition } };\n            }\n        }\n        else {\n            return {\n                animated: true,\n                transition: this.pageTransition\n            };\n        }\n    };\n    NSRouterLink.prototype.ngOnChanges = function (_) {\n        this.updateUrlTree();\n    };\n    NSRouterLink.prototype.updateUrlTree = function () {\n        this.urlTree = this.router.createUrlTree(this.commands, { relativeTo: this.currentRoute, queryParams: this.queryParams, fragment: this.fragment });\n    };\n    return NSRouterLink;\n}());\n__decorate([\n    core_1.Input(),\n    __metadata(\"design:type\", String)\n], NSRouterLink.prototype, \"target\", void 0);\n__decorate([\n    core_1.Input(),\n    __metadata(\"design:type\", Object)\n], NSRouterLink.prototype, \"queryParams\", void 0);\n__decorate([\n    core_1.Input(),\n    __metadata(\"design:type\", String)\n], NSRouterLink.prototype, \"fragment\", void 0);\n__decorate([\n    core_1.Input(),\n    __metadata(\"design:type\", Boolean)\n], NSRouterLink.prototype, \"clearHistory\", void 0);\n__decorate([\n    core_1.Input(),\n    __metadata(\"design:type\", Object)\n], NSRouterLink.prototype, \"pageTransition\", void 0);\n__decorate([\n    core_1.Input(\"nsRouterLink\"),\n    __metadata(\"design:type\", Object),\n    __metadata(\"design:paramtypes\", [Object])\n], NSRouterLink.prototype, \"params\", null);\n__decorate([\n    core_1.HostListener(\"tap\"),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", []),\n    __metadata(\"design:returntype\", void 0)\n], NSRouterLink.prototype, \"onTap\", null);\nNSRouterLink = __decorate([\n    core_1.Directive({ selector: \"[nsRouterLink]\" }),\n    __param(3, core_1.Optional()),\n    __metadata(\"design:paramtypes\", [router_1.Router,\n        router_extensions_1.RouterExtensions,\n        router_1.ActivatedRoute,\n        page_router_outlet_1.PageRoute])\n], NSRouterLink);\nexports.NSRouterLink = NSRouterLink;\n//# sourceMappingURL=ns-router-link.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/router/page-router-outlet.js":"var core_1 = require(\"@angular/core\");\nvar router_1 = require(\"@angular/router\");\nvar frame_1 = require(\"ui/frame\");\nvar page_1 = require(\"ui/page\");\nvar BehaviorSubject_1 = require(\"rxjs/BehaviorSubject\");\nvar lang_facade_1 = require(\"../lang-facade\");\nvar platform_providers_1 = require(\"../platform-providers\");\nvar trace_1 = require(\"../trace\");\nvar detached_loader_1 = require(\"../common/detached-loader\");\nvar view_util_1 = require(\"../view-util\");\nvar ns_location_strategy_1 = require(\"./ns-location-strategy\");\nvar PageRoute = (function () {\n    function PageRoute(startRoute) {\n        this.activatedRoute = new BehaviorSubject_1.BehaviorSubject(startRoute);\n    }\n    return PageRoute;\n}());\nexports.PageRoute = PageRoute;\n/**\n * Reference Cache\n */\nvar RefCache = (function () {\n    function RefCache() {\n        this.cache = new Array();\n    }\n    RefCache.prototype.push = function (componentRef, reusedRoute, outletMap, loaderRef) {\n        this.cache.push({ componentRef: componentRef, reusedRoute: reusedRoute, outletMap: outletMap, loaderRef: loaderRef });\n    };\n    RefCache.prototype.pop = function () {\n        return this.cache.pop();\n    };\n    RefCache.prototype.peek = function () {\n        return this.cache[this.cache.length - 1];\n    };\n    Object.defineProperty(RefCache.prototype, \"length\", {\n        get: function () {\n            return this.cache.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return RefCache;\n}());\nvar PageRouterOutlet = (function () {\n    function PageRouterOutlet(parentOutletMap, location, name, locationStrategy, componentFactoryResolver, resolver, frame, device, pageFactory) {\n        this.location = location;\n        this.locationStrategy = locationStrategy;\n        this.componentFactoryResolver = componentFactoryResolver;\n        this.resolver = resolver;\n        this.frame = frame;\n        this.pageFactory = pageFactory;\n        this.refCache = new RefCache();\n        this.isInitialPage = true;\n        parentOutletMap.registerOutlet(name ? name : router_1.PRIMARY_OUTLET, this);\n        this.viewUtil = new view_util_1.ViewUtil(device);\n        this.detachedLoaderFactory = resolver.resolveComponentFactory(detached_loader_1.DetachedLoader);\n        log(\"DetachedLoaderFactory loaded\");\n    }\n    Object.defineProperty(PageRouterOutlet.prototype, \"locationInjector\", {\n        /** @deprecated from Angular since v4 */\n        get: function () { return this.location.injector; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageRouterOutlet.prototype, \"locationFactoryResolver\", {\n        /** @deprecated from Angular since v4 */\n        get: function () { return this.resolver; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageRouterOutlet.prototype, \"isActivated\", {\n        get: function () {\n            return !!this.currentActivatedComp;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageRouterOutlet.prototype, \"component\", {\n        get: function () {\n            if (!this.currentActivatedComp) {\n                throw new Error(\"Outlet is not activated\");\n            }\n            return this.currentActivatedComp.instance;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageRouterOutlet.prototype, \"activatedRoute\", {\n        get: function () {\n            if (!this.currentActivatedComp) {\n                throw new Error(\"Outlet is not activated\");\n            }\n            return this.currentActivatedRoute;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PageRouterOutlet.prototype.deactivate = function () {\n        if (this.locationStrategy._isPageNavigatingBack()) {\n            log(\"PageRouterOutlet.deactivate() while going back - should destroy\");\n            var poppedItem = this.refCache.pop();\n            var poppedRef = poppedItem.componentRef;\n            if (this.currentActivatedComp !== poppedRef) {\n                throw new Error(\"Current componentRef is different for cached componentRef\");\n            }\n            this.destroyCacheItem(poppedItem);\n            this.currentActivatedComp = null;\n        }\n        else {\n            log(\"PageRouterOutlet.deactivate() while going forward - do nothing\");\n        }\n    };\n    PageRouterOutlet.prototype.clearRefCache = function () {\n        while (this.refCache.length > 0) {\n            this.destroyCacheItem(this.refCache.pop());\n        }\n    };\n    PageRouterOutlet.prototype.destroyCacheItem = function (poppedItem) {\n        if (lang_facade_1.isPresent(poppedItem.componentRef)) {\n            poppedItem.componentRef.destroy();\n        }\n        if (lang_facade_1.isPresent(poppedItem.loaderRef)) {\n            poppedItem.loaderRef.destroy();\n        }\n    };\n    /**\n     * Called by the Router to instantiate a new component during the commit phase of a navigation.\n     * This method in turn is responsible for calling the `routerOnActivate` hook of its child.\n     */\n    PageRouterOutlet.prototype.activateWith = function (activatedRoute, resolver, outletMap) {\n        this.outletMap = outletMap;\n        this.currentActivatedRoute = activatedRoute;\n        resolver = resolver || this.resolver;\n        if (this.locationStrategy._isPageNavigatingBack()) {\n            this.activateOnGoBack(activatedRoute, outletMap);\n        }\n        else {\n            this.activateOnGoForward(activatedRoute, outletMap, resolver);\n        }\n    };\n    PageRouterOutlet.prototype.activateOnGoForward = function (activatedRoute, outletMap, loadedResolver) {\n        var factory = this.getComponentFactory(activatedRoute, loadedResolver);\n        var pageRoute = new PageRoute(activatedRoute);\n        if (this.isInitialPage) {\n            log(\"PageRouterOutlet.activate() initial page - just load component\");\n            this.isInitialPage = false;\n            var injector = new OutletInjector(activatedRoute, outletMap, this.location.injector);\n            this.currentActivatedComp = this.location.createComponent(factory, this.location.length, injector, []);\n            this.currentActivatedComp.changeDetectorRef.detectChanges();\n            this.refCache.push(this.currentActivatedComp, pageRoute, outletMap, null);\n        }\n        else {\n            log(\"PageRouterOutlet.activate() forward navigation - \" +\n                \"create detached loader in the loader container\");\n            var page = this.pageFactory({\n                isNavigation: true,\n                componentType: factory.componentType\n            });\n            var childInjector = new ChildInjector(activatedRoute, outletMap, page, this.location.injector);\n            var loaderRef = this.location.createComponent(this.detachedLoaderFactory, this.location.length, childInjector, []);\n            loaderRef.changeDetectorRef.detectChanges();\n            this.currentActivatedComp = loaderRef.instance.loadWithFactory(factory);\n            this.loadComponentInPage(page, this.currentActivatedComp);\n            this.currentActivatedComp.changeDetectorRef.detectChanges();\n            this.refCache.push(this.currentActivatedComp, pageRoute, outletMap, loaderRef);\n        }\n    };\n    PageRouterOutlet.prototype.activateOnGoBack = function (activatedRoute, outletMap) {\n        log(\"PageRouterOutlet.activate() - Back navigation, so load from cache\");\n        this.locationStrategy._finishBackPageNavigation();\n        var cacheItem = this.refCache.peek();\n        cacheItem.reusedRoute.activatedRoute.next(activatedRoute);\n        this.outletMap = cacheItem.outletMap;\n        // HACK: Fill the outlet map provided by the router, with the outlets that we have\n        // cached. This is needed because the component is taken from the cache and not\n        // created - so it will not register its child router-outlets to the newly created\n        // outlet map.\n        Object.assign(outletMap, cacheItem.outletMap);\n        this.currentActivatedComp = cacheItem.componentRef;\n    };\n    PageRouterOutlet.prototype.loadComponentInPage = function (page, componentRef) {\n        var _this = this;\n        // Component loaded. Find its root native view.\n        var componentView = componentRef.location.nativeElement;\n        // Remove it from original native parent.\n        this.viewUtil.removeChild(componentView.parent, componentView);\n        // Add it to the new page\n        page.content = componentView;\n        page.on(\"navigatedFrom\", global.Zone.current.wrap(function (args) {\n            if (args.isBackNavigation) {\n                _this.locationStrategy._beginBackPageNavigation();\n                _this.locationStrategy.back();\n            }\n        }));\n        var navOptions = this.locationStrategy._beginPageNavigation();\n        this.frame.navigate({\n            create: function () { return page; },\n            clearHistory: navOptions.clearHistory,\n            animated: navOptions.animated,\n            transition: navOptions.transition\n        });\n        // Clear refCache if navigation with clearHistory\n        if (navOptions.clearHistory) {\n            this.clearRefCache();\n        }\n    };\n    // NOTE: Using private APIs - potential break point!\n    PageRouterOutlet.prototype.getComponentFactory = function (activatedRoute, loadedResolver) {\n        var snapshot = activatedRoute._futureSnapshot;\n        var component = snapshot._routeConfig.component;\n        var factory;\n        if (loadedResolver) {\n            factory = loadedResolver.resolveComponentFactory(component);\n        }\n        else {\n            factory = this.componentFactoryResolver.resolveComponentFactory(component);\n        }\n        return factory;\n    };\n    return PageRouterOutlet;\n}());\nPageRouterOutlet = __decorate([\n    core_1.Directive({ selector: \"page-router-outlet\" }) // tslint:disable-line:directive-selector\n    ,\n    __param(2, core_1.Attribute(\"name\")),\n    __param(7, core_1.Inject(platform_providers_1.DEVICE)),\n    __param(8, core_1.Inject(platform_providers_1.PAGE_FACTORY)),\n    __metadata(\"design:paramtypes\", [router_1.RouterOutletMap,\n        core_1.ViewContainerRef, String, ns_location_strategy_1.NSLocationStrategy,\n        core_1.ComponentFactoryResolver,\n        core_1.ComponentFactoryResolver,\n        frame_1.Frame, Object, Function])\n], PageRouterOutlet);\nexports.PageRouterOutlet = PageRouterOutlet;\nvar OutletInjector = (function () {\n    function OutletInjector(route, map, parent) {\n        this.route = route;\n        this.map = map;\n        this.parent = parent;\n    }\n    OutletInjector.prototype.get = function (token, notFoundValue) {\n        if (token === router_1.ActivatedRoute) {\n            return this.route;\n        }\n        if (token === router_1.RouterOutletMap) {\n            return this.map;\n        }\n        return this.parent.get(token, notFoundValue);\n    };\n    return OutletInjector;\n}());\nvar ChildInjector = (function (_super) {\n    __extends(ChildInjector, _super);\n    function ChildInjector(route, map, page, parent) {\n        var _this = _super.call(this, route, map, parent) || this;\n        _this.page = page;\n        return _this;\n    }\n    ChildInjector.prototype.get = function (token, notFoundValue) {\n        if (token === page_1.Page) {\n            return this.page;\n        }\n        return _super.prototype.get.call(this, token, notFoundValue);\n    };\n    return ChildInjector;\n}(OutletInjector));\nfunction log(msg) {\n    trace_1.routerLog(msg);\n}\n//# sourceMappingURL=page-router-outlet.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/router/router-extensions.js":"var core_1 = require(\"@angular/core\");\nvar router_1 = require(\"@angular/router\");\nvar ns_location_strategy_1 = require(\"./ns-location-strategy\");\nvar frame_1 = require(\"ui/frame\");\nvar RouterExtensions = (function () {\n    function RouterExtensions(router, locationStrategy, frame) {\n        this.router = router;\n        this.locationStrategy = locationStrategy;\n        this.frame = frame;\n    }\n    RouterExtensions.prototype.navigate = function (commands, extras) {\n        if (extras) {\n            this.locationStrategy._setNavigationOptions(extras);\n        }\n        return this.router.navigate(commands, extras);\n    };\n    RouterExtensions.prototype.navigateByUrl = function (url, options) {\n        if (options) {\n            this.locationStrategy._setNavigationOptions(options);\n        }\n        return this.router.navigateByUrl(url);\n    };\n    RouterExtensions.prototype.back = function () {\n        this.locationStrategy.back();\n    };\n    RouterExtensions.prototype.canGoBack = function () {\n        return this.locationStrategy.canGoBack();\n    };\n    RouterExtensions.prototype.backToPreviousPage = function () {\n        this.frame.goBack();\n    };\n    RouterExtensions.prototype.canGoBackToPreviousPage = function () {\n        return this.frame.canGoBack();\n    };\n    return RouterExtensions;\n}());\nRouterExtensions = __decorate([\n    core_1.Injectable(),\n    __metadata(\"design:paramtypes\", [router_1.Router,\n        ns_location_strategy_1.NSLocationStrategy,\n        frame_1.Frame])\n], RouterExtensions);\nexports.RouterExtensions = RouterExtensions;\n//# sourceMappingURL=router-extensions.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/value-accessors/checked-value-accessor.js":"var core_1 = require(\"@angular/core\");\nvar forms_1 = require(\"@angular/forms\");\nvar lang_facade_1 = require(\"../lang-facade\");\nvar base_value_accessor_1 = require(\"./base-value-accessor\");\nvar CHECKED_VALUE_ACCESSOR = { provide: forms_1.NG_VALUE_ACCESSOR,\n    useExisting: core_1.forwardRef(function () { return CheckedValueAccessor; }), multi: true };\n/**\n * The accessor for setting a checked property and listening to changes that is used by the\n * {@link NgModel} directives.\n *\n *  ### Example\n *  ```\n *  <Switch [(ngModel)]=\"model.test\">\n *  ```\n */\nvar CheckedValueAccessor = (function (_super) {\n    __extends(CheckedValueAccessor, _super);\n    function CheckedValueAccessor(elementRef) {\n        var _this = _super.call(this, elementRef.nativeElement) || this;\n        _this.onTouched = function () { };\n        return _this;\n    }\n    CheckedValueAccessor.prototype.checkedChangeListener = function (event) {\n        this.onChange(event.value);\n    };\n    CheckedValueAccessor.prototype.writeValue = function (value) {\n        var normalizedValue = false;\n        if (!lang_facade_1.isBlank(value)) {\n            if (typeof value === \"string\") {\n                normalizedValue = value.toLowerCase() === \"true\" ? true : false;\n            }\n            else {\n                normalizedValue = !!value;\n            }\n        }\n        this.view.checked = normalizedValue;\n    };\n    CheckedValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n    return CheckedValueAccessor;\n}(base_value_accessor_1.BaseValueAccessor));\n__decorate([\n    core_1.HostListener(\"checkedChange\", [\"$event\"]),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object]),\n    __metadata(\"design:returntype\", void 0)\n], CheckedValueAccessor.prototype, \"checkedChangeListener\", null);\nCheckedValueAccessor = __decorate([\n    core_1.Directive({\n        // tslint:disable-next-line:max-line-length directive-selector\n        selector: \"Switch[ngModel], Switch[formControlName], switch[ngModel], switch[formControlName], switch[ngModel], switch[formControlName]\",\n        providers: [CHECKED_VALUE_ACCESSOR]\n    }),\n    __metadata(\"design:paramtypes\", [core_1.ElementRef])\n], CheckedValueAccessor);\nexports.CheckedValueAccessor = CheckedValueAccessor;\n//# sourceMappingURL=checked-value-accessor.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/value-accessors/date-value-accessor.js":"var core_1 = require(\"@angular/core\");\nvar forms_1 = require(\"@angular/forms\");\nvar lang_facade_1 = require(\"../lang-facade\");\nvar base_value_accessor_1 = require(\"./base-value-accessor\");\nvar DATE_VALUE_ACCESSOR = { provide: forms_1.NG_VALUE_ACCESSOR,\n    useExisting: core_1.forwardRef(function () { return DateValueAccessor; }), multi: true };\n/**\n * The accessor for setting a date and listening to changes that is used by the\n * {@link NgModel} directives.\n *\n *  ### Example\n *  ```\n *  <DatePicker [(ngModel)]=\"model.test\">\n *  ```\n */\nvar DateValueAccessor = (function (_super) {\n    __extends(DateValueAccessor, _super);\n    function DateValueAccessor(elementRef) {\n        var _this = _super.call(this, elementRef.nativeElement) || this;\n        _this.onTouched = function () { };\n        return _this;\n    }\n    DateValueAccessor.prototype.dateChangeListener = function (event) {\n        this.onChange(event.value);\n    };\n    DateValueAccessor.prototype.writeValue = function (value) {\n        var normalizedValue = lang_facade_1.isBlank(value) ? new Date() : value;\n        if (!lang_facade_1.isDate(normalizedValue)) {\n            if (typeof normalizedValue === \"string\") {\n                normalizedValue = new Date(normalizedValue);\n            }\n            else if (typeof normalizedValue === \"number\") {\n                normalizedValue = new Date(normalizedValue);\n            }\n            if (!lang_facade_1.isDate(normalizedValue)) {\n                normalizedValue = new Date();\n            }\n        }\n        this.view.date = normalizedValue;\n    };\n    DateValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n    return DateValueAccessor;\n}(base_value_accessor_1.BaseValueAccessor));\n__decorate([\n    core_1.HostListener(\"dateChange\", [\"$event\"]),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object]),\n    __metadata(\"design:returntype\", void 0)\n], DateValueAccessor.prototype, \"dateChangeListener\", null);\nDateValueAccessor = __decorate([\n    core_1.Directive({\n        // tslint:disable-next-line:max-line-length directive-selector\n        selector: \"DatePicker[ngModel], DatePicker[formControlName], datePicker[ngModel], datePicker[formControlName], date-picker[ngModel], date-picker[formControlName]\",\n        providers: [DATE_VALUE_ACCESSOR]\n    }),\n    __metadata(\"design:paramtypes\", [core_1.ElementRef])\n], DateValueAccessor);\nexports.DateValueAccessor = DateValueAccessor;\n//# sourceMappingURL=date-value-accessor.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/value-accessors/number-value-accessor.js":"var core_1 = require(\"@angular/core\");\nvar forms_1 = require(\"@angular/forms\");\nvar lang_facade_1 = require(\"../lang-facade\");\nvar base_value_accessor_1 = require(\"./base-value-accessor\");\nvar NUMBER_VALUE_ACCESSOR = { provide: forms_1.NG_VALUE_ACCESSOR,\n    useExisting: core_1.forwardRef(function () { return NumberValueAccessor; }), multi: true };\n/**\n * The accessor for setting a value and listening to changes that is used by the\n * {@link NgModel}\n *\n *  ### Example\n *  ```\n *  <Slider [(ngModel)]=\"model.test\">\n *  ```\n */\nvar NumberValueAccessor = (function (_super) {\n    __extends(NumberValueAccessor, _super);\n    function NumberValueAccessor(elementRef) {\n        var _this = _super.call(this, elementRef.nativeElement) || this;\n        _this.onTouched = function () { };\n        return _this;\n    }\n    NumberValueAccessor.prototype.valueChangeListener = function (event) {\n        this.onChange(event.value);\n    };\n    NumberValueAccessor.prototype.writeValue = function (value) {\n        var normalizedValue;\n        if (lang_facade_1.isBlank(value)) {\n            normalizedValue = 0;\n        }\n        else {\n            if (lang_facade_1.isNumber(value)) {\n                normalizedValue = value;\n            }\n            else {\n                var parsedValue = Number(value);\n                normalizedValue = isNaN(parsedValue) ? 0 : parsedValue;\n            }\n        }\n        this.view.value = normalizedValue;\n    };\n    NumberValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n    return NumberValueAccessor;\n}(base_value_accessor_1.BaseValueAccessor));\n__decorate([\n    core_1.HostListener(\"valueChange\", [\"$event\"]),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object]),\n    __metadata(\"design:returntype\", void 0)\n], NumberValueAccessor.prototype, \"valueChangeListener\", null);\nNumberValueAccessor = __decorate([\n    core_1.Directive({\n        // tslint:disable-next-line:max-line-length directive-selector\n        selector: \"Slider[ngModel], Slider[formControlName], slider[ngModel], slider[formControlName], slider[ngModel], slider[formControlName]\",\n        providers: [NUMBER_VALUE_ACCESSOR]\n    }),\n    __metadata(\"design:paramtypes\", [core_1.ElementRef])\n], NumberValueAccessor);\nexports.NumberValueAccessor = NumberValueAccessor;\n//# sourceMappingURL=number-value-accessor.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/value-accessors/selectedIndex-value-accessor.js":"var core_1 = require(\"@angular/core\");\nvar forms_1 = require(\"@angular/forms\");\nvar base_value_accessor_1 = require(\"./base-value-accessor\");\nvar utils_1 = require(\"../common/utils\");\nvar SELECTED_INDEX_VALUE_ACCESSOR = { provide: forms_1.NG_VALUE_ACCESSOR,\n    useExisting: core_1.forwardRef(function () { return SelectedIndexValueAccessor; }), multi: true };\n/**\n * The accessor for setting a selectedIndex and listening to changes that is used by the\n * {@link NgModel} directives.\n *\n *  ### Example\n *  ```\n *  <SegmentedBar [(ngModel)]=\"model.test\">\n *  ```\n */\nvar SelectedIndexValueAccessor = (function (_super) {\n    __extends(SelectedIndexValueAccessor, _super);\n    function SelectedIndexValueAccessor(elementRef) {\n        var _this = _super.call(this, elementRef.nativeElement) || this;\n        _this.onTouched = function () { };\n        return _this;\n    }\n    SelectedIndexValueAccessor.prototype.selectedIndexChangeListener = function (event) {\n        this.onChange(event.value);\n    };\n    SelectedIndexValueAccessor.prototype.writeValue = function (value) {\n        this._normalizedValue = utils_1.convertToInt(value);\n        if (this.viewInitialized) {\n            this.view.selectedIndex = this._normalizedValue;\n        }\n    };\n    SelectedIndexValueAccessor.prototype.ngAfterViewInit = function () {\n        this.viewInitialized = true;\n        this.view.selectedIndex = this._normalizedValue;\n    };\n    SelectedIndexValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n    return SelectedIndexValueAccessor;\n}(base_value_accessor_1.BaseValueAccessor));\n__decorate([\n    core_1.HostListener(\"selectedIndexChange\", [\"$event\"]),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object]),\n    __metadata(\"design:returntype\", void 0)\n], SelectedIndexValueAccessor.prototype, \"selectedIndexChangeListener\", null);\nSelectedIndexValueAccessor = __decorate([\n    core_1.Directive({\n        // tslint:disable-next-line:max-line-length directive-selector\n        selector: \"SegmentedBar[ngModel], SegmentedBar[formControlName], segmentedBar[ngModel], segmentedBar[formControlName], segmented-bar[ngModel], segmented-bar[formControlName], ListPicker[ngModel], ListPicker[formControlName], listPicker[ngModel], listPicker[formControlName], list-picker[ngModel], list-picker[formControlName], TabView[ngModel], TabView[formControlName], tabView[ngModel], tabView[formControlName], tab-view[ngModel], tab-view[formControlName]\",\n        providers: [SELECTED_INDEX_VALUE_ACCESSOR]\n    }),\n    __metadata(\"design:paramtypes\", [core_1.ElementRef])\n], SelectedIndexValueAccessor);\nexports.SelectedIndexValueAccessor = SelectedIndexValueAccessor;\n//# sourceMappingURL=selectedIndex-value-accessor.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/common/utils.js":"var lang_facade_1 = require(\"../lang-facade\");\nfunction convertToInt(value) {\n    var normalizedValue;\n    if (lang_facade_1.isBlank(value)) {\n        normalizedValue = 0;\n    }\n    else {\n        if (lang_facade_1.isNumber(value)) {\n            normalizedValue = value;\n        }\n        else {\n            var parsedValue = parseInt(value.toString(), 10);\n            normalizedValue = isNaN(parsedValue) ? 0 : parsedValue;\n        }\n    }\n    return Math.round(normalizedValue);\n}\nexports.convertToInt = convertToInt;\n//# sourceMappingURL=utils.js.map","/home/travis/build/npmtest/node-npmtest-nativescript-angular/node_modules/nativescript-angular/value-accessors/time-value-accessor.js":"var core_1 = require(\"@angular/core\");\nvar forms_1 = require(\"@angular/forms\");\nvar lang_facade_1 = require(\"../lang-facade\");\nvar base_value_accessor_1 = require(\"./base-value-accessor\");\nvar TIME_VALUE_ACCESSOR = { provide: forms_1.NG_VALUE_ACCESSOR,\n    useExisting: core_1.forwardRef(function () { return TimeValueAccessor; }), multi: true };\n/**\n * The accessor for setting a time and listening to changes that is used by the\n * {@link NgModel} directives.\n *\n *  ### Example\n *  ```\n *  <TimePicker [(ngModel)]=\"model.test\">\n *  ```\n */\nvar TimeValueAccessor = (function (_super) {\n    __extends(TimeValueAccessor, _super);\n    function TimeValueAccessor(elementRef) {\n        var _this = _super.call(this, elementRef.nativeElement) || this;\n        _this.onTouched = function () { };\n        return _this;\n    }\n    TimeValueAccessor.prototype.timeChangeListener = function (event) {\n        this.onChange(event.value);\n    };\n    TimeValueAccessor.prototype.writeValue = function (value) {\n        var normalizedValue = lang_facade_1.isBlank(value) ? new Date() : value;\n        if (!lang_facade_1.isDate(normalizedValue)) {\n            if (typeof normalizedValue === \"string\") {\n                normalizedValue = new Date(normalizedValue);\n            }\n            else if (typeof normalizedValue === \"number\") {\n                normalizedValue = new Date(normalizedValue);\n            }\n            if (!lang_facade_1.isDate(normalizedValue)) {\n                normalizedValue = new Date();\n            }\n        }\n        this.view.time = normalizedValue;\n    };\n    TimeValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n    return TimeValueAccessor;\n}(base_value_accessor_1.BaseValueAccessor));\n__decorate([\n    core_1.HostListener(\"timeChange\", [\"$event\"]),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object]),\n    __metadata(\"design:returntype\", void 0)\n], TimeValueAccessor.prototype, \"timeChangeListener\", null);\nTimeValueAccessor = __decorate([\n    core_1.Directive({\n        // tslint:disable-next-line:max-line-length directive-selector\n        selector: \"TimePicker[ngModel], TimePicker[formControlName], timePicker[ngModel], timePicker[formControlName], time-picker[ngModel], time-picker[formControlName]\",\n        providers: [TIME_VALUE_ACCESSOR]\n    }),\n    __metadata(\"design:paramtypes\", [core_1.ElementRef])\n], TimeValueAccessor);\nexports.TimeValueAccessor = TimeValueAccessor;\n//# sourceMappingURL=time-value-accessor.js.map"}